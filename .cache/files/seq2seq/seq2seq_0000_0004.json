{"api": "2.0", "content": {"html": "<h1 id='0' style='font-size:22px'>Sequence to Sequence Learning<br>with Neural Networks</h1>\n<table id='1' style='font-size:18px'><thead></thead><tbody><tr><td>Ilya Sutskever</td><td>Oriol Vinyals</td><td>Quoc V. Le</td></tr><tr><td>Google</td><td>Google</td><td>Google</td></tr><tr><td>ilyasu@google .com</td><td>vinyal s@google · com</td><td>qvl @google.com</td></tr></tbody></table>\n<p id='2' data-category='paragraph' style='font-size:20px'>Abstract</p>\n<p id='3' data-category='paragraph' style='font-size:16px'>Deep Neural Networks (DNNs) are powerful models that have achieved excel-<br>lent performance on difficult learning tasks. Although DNNs work well whenever<br>large labeled training sets are available, they cannot be used to map sequences to<br>sequences. In this paper, we present a general end-to-end approach to sequence<br>learning that makes minimal assumptions on the sequence structure. Our method<br>uses a multilayered Long Short-Term Memory (LSTM) to map the input sequence<br>to a vector of a fixed dimensionality, and then another deep LSTM to decode the<br>target sequence from the vector. Our main result is that on an English to French<br>translation task from the WMT' 14 dataset, the translations produced by the LSTM<br>achieve a BLEU score of 34.8 on the entire test set, where the LSTM's BLEU<br>score was penalized on out-of-vocabulary words. Additionally, the LSTM did not<br>have difficulty on long sentences. For comparison, a phrase-based SMT system<br>achieves a BLEU score of 33.3 on the same dataset. When we used the LSTM<br>to rerank the 1000 hypotheses produced by the aforementioned SMT system, its<br>BLEU score increases to 36.5, which is close to the previous best result on this<br>task. The LSTM also learned sensible phrase and sentence representations that<br>are sensitive to word order and are relatively invariant to the active and the pas-<br>sive voice. Finally, we found that reversing the order of the words in all source<br>sentences (but not target sentences) improved the LSTM's performance markedly,<br>because doing so introduced many short term dependencies between the source<br>and the target sentence which made the optimization problem easier.</p>\n<p id='4' data-category='paragraph' style='font-size:18px'>1 Introduction</p>\n<p id='5' data-category='paragraph' style='font-size:16px'>Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve ex-<br>cellent performance on difficult problems such as speech recognition [13, 7] and visual object recog-<br>nition [19, 6, 21, 20]. DNNs are powerful because they can perform arbitrary parallel computation<br>for a modest number of steps. A surprising example of the power of DNNs is their ability to sort<br>N N-bit numbers using only 2 hidden layers of quadratic size [27]. So, while neural networks are<br>related to conventional statistical models, they learn an intricate computation. Furthermore, large<br>DNNs can be trained with supervised backpropagation whenever the labeled training set has enough<br>information to specify the network's parameters. Thus, if there exists a parameter setting of a large<br>DNN that achieves good results (for example, because humans can solve the task very rapidly),<br>supervised backpropagation will find these parameters and solve the problem.</p>\n<br><p id='6' data-category='paragraph' style='font-size:16px'>Despite their flexibility and power, DNNs can only be applied to problems whose inputs and targets<br>can be sensibly encoded with vectors of fixed dimensionality. It is a significant limitation, since<br>many important problems are best expressed with sequences whose lengths are not known a-priori.<br>For example, speech recognition and machine translation are sequential problems. Likewise, ques-<br>tion answering can also be seen as mapping a sequence of words representing the question to a</p>\n<br><header id='7' style='font-size:14px'>2014<br>Dec<br>14<br>[cs.CL]<br>arXiv:1409.3215v3</header>\n<footer id='8' style='font-size:14px'>1</footer>\n<p id='9' data-category='paragraph' style='font-size:16px'>sequence of words representing the answer. It is therefore clear that a domain-independent method<br>that learns to map sequences to sequences would be useful.</p>\n<br><p id='10' data-category='paragraph' style='font-size:20px'>Sequences pose a challenge for DNNs because they require that the dimensionality of the inputs and<br>outputs is known and fixed. In this paper, we show that a straightforward application of the Long<br>Short-Term Memory (LSTM) architecture [16] can solve general sequence to sequence problems.<br>The idea is to use one LSTM to read the input sequence, one timestep at a time, to obtain large fixed-<br>dimensional vector representation, and then to use another LSTM to extract the output sequence<br>from that vector (fig. 1). The second LSTM is essentially a recurrent neural network language model<br>[28, 23, 30] except that it is conditioned on the input sequence. The LSTM's ability to successfully<br>learn on data with long range temporal dependencies makes it a natural choice for this application<br>due to the considerable time lag between the inputs and their corresponding outputs (fig. 1).</p>\n<br><p id='11' data-category='paragraph' style='font-size:20px'>There have been a number of related attempts to address the general sequence to sequence learning<br>problem with neural networks. Our approach is closely related to Kalchbrenner and Blunsom [18]<br>who were the first to map the entire input sentence to vector, and is related to Cho et al. [5] although<br>the latter was used only for rescoring hypotheses produced by a phrase-based system. Graves [10]<br>introduced a novel differentiable attention mechanism that allows neural networks to focus on dif-<br>ferent parts of their input, and an elegant variant of this idea was successfully applied to machine<br>translation by Bahdanau et al. [2]. The Connectionist Sequence Classification is another popular<br>technique for mapping sequences to sequences with neural networks, but it assumes a monotonic<br>alignment between the inputs and the outputs [1 1].</p>\n<figure id='12'><img style='font-size:16px' alt=\"W X Y Z <EOS>\nT T ↑\nA B C <EOS> w X Y Z\" data-coord=\"top-left:(257,674); bottom-right:(1019,837)\" /></figure>\n<p id='13' data-category='paragraph' style='font-size:14px'>Figure 1: Our model reads an input sentence \"ABC\" and produces \"WXYZ\" as the output sentence. The<br>model stops making predictions after outputting the end-of-sentence token. Note that the LSTM reads the<br>input sentence in reverse, because doing so introduces many short term dependencies in the data that make the<br>optimization problem much easier.</p>\n<p id='14' data-category='paragraph' style='font-size:20px'>The main result of this work is the following. On the WMT' 14 English to French translation task,<br>we obtained a BLEU score of 34.81 by directly extracting translations from an ensemble of 5 deep<br>LSTMs (with 384M parameters and 8,000 dimensional state each) using a simple left-to-right beam-<br>search decoder. This is by far the best result achieved by direct translation with large neural net-<br>works. For comparison, the BLEU score of an SMT baseline on this dataset is 33.30 [29]. The 34.81<br>BLEU score was achieved by an LSTM with a vocabulary of 80k words, so the score was penalized<br>whenever the reference translation contained a word not covered by these 80k. This result shows<br>that a relatively unoptimized small-vocabulary neural network architecture which has much room<br>for improvement outperforms a phrase-based SMT system.</p>\n<br><p id='15' data-category='paragraph' style='font-size:20px'>Finally, we used the LSTM to rescore the publicly available 1000-best lists of the SMT baseline on<br>the same task [29]. By doing so, we obtained a BLEU score of 36.5, which improves the baseline by<br>3.2 BLEU points and is close to the previous best published result on this task (which is 37.0 [9]).</p>\n<br><p id='16' data-category='paragraph' style='font-size:20px'>Surprisingly, the LSTM did not suffer on very long sentences, despite the recent experience of other<br>researchers with related architectures [26]. We were able to do well on long sentences because we<br>reversed the order of words in the source sentence but not the target sentences in the training and test<br>set. By doing so, we introduced many short term dependencies that made the optimization problem<br>much simpler (see sec. 2 and 3.3). As a result, SGD could learn LSTMs that had no trouble with<br>long sentences. The simple trick of reversing the words in the source sentence is one of the key<br>technical contributions of this work.</p>\n<p id='17' data-category='paragraph' style='font-size:16px'>A useful property of the LSTM is that it learns to map an input sentence of variable length into<br>a fixed-dimensional vector representation. Given that translations tend to be paraphrases of the<br>source sentences, the translation objective encourages the LSTM to find sentence representations<br>that capture their meaning, as sentences with similar meanings are close to each other while different</p>\n<footer id='18' style='font-size:20px'>2</footer>\n<p id='19' data-category='paragraph' style='font-size:14px'>sentences meanings will be far. A qualitative evaluation supports this claim, showing that our model<br>is aware of word order and is fairly invariant to the active and passive voice.</p>\n<p id='20' data-category='paragraph' style='font-size:18px'>2 The model</p>\n<p id='21' data-category='paragraph' style='font-size:14px'>The Recurrent Neural Network (RNN) [31, 28] is a natural generalization of feedforward neural<br>networks to sequences. Given a sequence of inputs (x1, . · .,XT), a standard RNN computes a<br>sequence of outputs (y1,· · . , YT) by iterating the following equation:</p>\n<p id='22' data-category='equation'>$$\\begin{array}{l l l}{{h_{t}}}&{{=}}&{{\\mathrm{sigm}\\left(W^{\\mathrm{hx}}x_{t}+W^{\\mathrm{hh}}h_{t-1}\\right)}}\\\\ {{y_{t}}}&{{=}}&{{W^{\\mathrm{yh}}h_{t}}}\\end{array}$$</p>\n<br><p id='23' data-category='paragraph' style='font-size:14px'>The RNN can easily map sequences to sequences whenever the alignment between the inputs the<br>outputs is known ahead of time. However, it is not clear how to apply an RNN to problems whose<br>input and the output sequences have different lengths with complicated and non-monotonic relation-<br>ships.</p>\n<br><p id='24' data-category='paragraph' style='font-size:14px'>The simplest strategy for general sequence learning is to map the input sequence to a fixed-sized<br>vector using one RNN, and then to map the vector to the target sequence with another RNN (this<br>approach has also been taken by Cho et al. [5]). While it could work in principle since the RNN is<br>provided with all the relevant information, it would be difficult to train the RNNs due to the resulting<br>long term dependencies (figure 1) [14, 4, 16, 15]. However, the Long Short-Term Memory (LSTM)<br>[16] is known to learn problems with long range temporal dependencies, so an LSTM may succeed<br>in this setting.</p>\n<p id='25' data-category='paragraph' style='font-size:14px'>The goal of the LSTM is to estimate the conditional probability p(y1, . : , YT' x1,···, xT) where<br>(x1, · · · , xT) is an input sequence and Y1, · · · , YT' is its corresponding output sequence whose length<br>T' may differ from T. The LSTM computes this conditional probability by first obtaining the fixed-<br>dimensional representation v of the input sequence (x1,.. · , xT) given by the last hidden state of the<br>LSTM, and then computing the probability of y1, · · · , YT' with a standard LSTM-LM formulation<br>whose initial hidden state is set to the representation v of x1, · · · , XT:</p>\n<p id='26' data-category='equation'>$$p(y_{1},\\cdot\\cdot\\cdot,y_{T^{\\prime}}|x_{1},\\cdot\\cdot\\cdot,x_{T})=\\prod_{t=1}^{T^{\\prime}}p(y_{t}|v,y_{1},\\cdot\\cdot\\cdot,y_{t-1})$$</p>\n<br><caption id='27' style='font-size:20px'>(1)</caption>\n<p id='28' data-category='paragraph' style='font-size:14px'>In this equation, each p(yt|v, y1, · · · , yt-1) distribution is represented with a softmax over all the<br>words in the vocabulary. We use the LSTM formulation from Graves [10]. Note that we require that<br>each sentence ends with a special end-of-sentence symbol \"<EOS>\", which enables the model to<br>define a distribution over sequences of all possible lengths. The overall scheme is outlined in figure<br>· <EOS>\" and then uses<br>1, where the shown LSTM computes the representation of \"A\", \"B\" , \"C\" ,<br>this representation to compute the probability of \"W\", \"X\", \"Y\" \"Z\" , <EOS>\"<br>\"<br>,</p>\n<br><p id='29' data-category='paragraph' style='font-size:14px'>Our actual models differ from the above description in three important ways. First, we used two<br>different LSTMs: one for the input sequence and another for the output sequence, because doing<br>so increases the number model parameters at negligible computational cost and makes it natural to<br>train the LSTM on multiple language pairs simultaneously [18]. Second, we found that deep LSTMs<br>significantly outperformed shallow LSTMs, so we chose an LSTM with four layers. Third, we found<br>it extremely valuable to reverse the order of the words of the input sentence. So for example, instead<br>of mapping the sentence a, b, c to the sentence �, �, % the LSTM is asked to map c, b, a to �, �, %<br>where �, �, づ is the translation of a, b, c. This way, a is in close proximity to �, bis fairly close to �,<br>and so on, a fact that makes it easy for SGD to \"establish communication\" between the input and the<br>output. We found this simple data transformation to greatly improve the performance of the LSTM.</p>\n<p id='30' data-category='paragraph' style='font-size:22px'>3 Experiments</p>\n<p id='31' data-category='paragraph' style='font-size:14px'>We applied our method to the WMT' 14 English to French MT task in two ways. We used it to<br>directly translate the input sentence without using a reference SMT system and we it to rescore the<br>n-best lists of an SMT baseline. We report the accuracy of these translation methods, present sample<br>translations, and visualize the resulting sentence representation.</p>\n<footer id='32' style='font-size:14px'>3</footer>\n<p id='33' data-category='paragraph' style='font-size:14px'>3.1 Dataset details</p>\n<p id='34' data-category='paragraph' style='font-size:14px'>We used the WMT' 14 English to French dataset. We trained our models on a subset of 12M sen-<br>tences consisting of 348M French words and 304M English words, which is a clean \"selected\"<br>subset from [29]. We chose this translation task and this specific training set subset because of the<br>public availability of a tokenized training and test set together with 1000-best lists from the baseline<br>SMT [29].</p>\n<p id='35' data-category='paragraph' style='font-size:14px'>As typical neural language models rely on a vector representation for each word, we used a fixed<br>vocabulary for both languages. We used 160,000 of the most frequent words for the source language<br>and 80,000 of the most frequent words for the target language. Every out-of-vocabulary word was<br>replaced with a special \"UNK\" token.</p>\n<p id='36' data-category='paragraph' style='font-size:18px'>3.2 Decoding and Rescoring</p>\n<p id='37' data-category='paragraph' style='font-size:14px'>The core of our experiments involved training a large deep LSTM on many sentence pairs. We<br>trained it by maximizing the log probability of a correct translation T given the source sentence S,<br>so the training objective is</p>\n<br><p id='38' data-category='equation'>$$\\textstyle{1/|{\\cal G}|}_{(T,S)\\in{\\cal S}}\\log p(T|S)$$</p>\n<br><p id='39' data-category='paragraph' style='font-size:16px'>where s is the training set. Once training is complete, we produce translations by finding the most<br>likely translation according to the LSTM:</p>\n<p id='40' data-category='equation'>$${\\hat{T}}=\\arg\\operatorname*{max}_{T}p(T|S)$$</p>\n<br><caption id='41' style='font-size:20px'>(2)</caption>\n<p id='42' data-category='paragraph' style='font-size:14px'>We search for the most likely translation using a simple left-to-right beam search decoder which<br>maintains a small number B of partial hypotheses, where a partial hypothesis is a prefix of some<br>translation. At each timestep we extend each partial hypothesis in the beam with every possible<br>word in the vocabulary. This greatly increases the number of the hypotheses so we discard all but<br>the B most likely hypotheses according to the model's log probability. As soon as the \"<EOS>\"<br>symbol is appended to a hypothesis, it is removed from the beam and is added to the set of complete<br>hypotheses. While this decoder is approximate, it is simple to implement. Interestingly, our system<br>performs well even with a beam size of 1, and a beam of size 2 provides most of the benefits of beam<br>search (Table 1).</p>\n<br><p id='43' data-category='paragraph' style='font-size:14px'>We also used the LSTM to rescore the 1000-best lists produced by the baseline system [29]. To<br>rescore an n-best list, we computed the log probability of every hypothesis with our LSTM and took<br>an even average with their score and the LSTM's score.</p>\n<h1 id='44' style='font-size:16px'>3.3 Reversing the Source Sentences</h1>\n<p id='45' data-category='paragraph' style='font-size:14px'>While the LSTM is capable of solving problems with long term dependencies, we discovered that<br>the LSTM learns much better when the source sentences are reversed (the target sentences are not<br>reversed). By doing so, the LSTM's test perplexity dropped from 5.8 to 4.7, and the test BLEU<br>scores of its decoded translations increased from 25.9 to 30.6.</p>\n<p id='46' data-category='paragraph' style='font-size:14px'>While we do not have a complete explanation to this phenomenon, we believe that it is caused by<br>the introduction of many short term dependencies to the dataset. Normally, when we concatenate a<br>source sentence with a target sentence, each word in the source sentence is far from its corresponding<br>word in the target sentence. As a result, the problem has a large \"minimal time lag\" [17]. By<br>reversing the words in the source sentence, the average distance between corresponding words in<br>the source and target language is unchanged. However, the first few words in the source language<br>are now very close to the first few words in the target language, so the problem's minimal time lag is<br>greatly reduced. Thus, backpropagation has an easier time \"establishing communication\" between<br>the source sentence and the target sentence, which in turn results in substantially improved overall<br>performance.</p>\n<p id='47' data-category='paragraph' style='font-size:14px'>Initially, we believed that reversing the input sentences would only lead to more confident predic-<br>tions in the early parts of the target sentence and to less confident predictions in the later parts. How-<br>ever, LSTMs trained on reversed source sentences did much better on long sentences than LSTMs</p>\n<footer id='48' style='font-size:14px'>4</footer>\n<p id='49' data-category='paragraph' style='font-size:16px'>trained on the raw source sentences (see sec. 3.7), which suggests that reversing the input sentences<br>results in LSTMs with better memory utilization.</p>\n<p id='50' data-category='paragraph' style='font-size:22px'>3.4 Training details</p>\n<p id='51' data-category='paragraph' style='font-size:18px'>We found that the LSTM models are fairly easy to train. We used deep LSTMs with 4 layers,<br>with 1000 cells at each layer and 1000 dimensional word embeddings, with an input vocabulary<br>of 160,000 and an output vocabulary of 80,000. Thus the deep LSTM uses 8000 real numbers to<br>represent a sentence. We found deep LSTMs to significantly outperform shallow LSTMs, where<br>each additional layer reduced perplexity by nearly 10%, possibly due to their much larger hidden<br>state. We used a naive softmax over 80,000 words at each output. The resulting LSTM has 384M<br>parameters of which 64M are pure recurrent connections (32M for the \"encoder\" LSTM and 32M<br>for the \"decoder\" LSTM). The complete training details are given below:</p>\n<p id='52' data-category='list' style='font-size:18px'>· We initialized all of the LSTM's parameters with the uniform distribution between -0.08<br>and 0.08<br>· We used stochastic gradient descent without momentum, with a fixed learning rate of 0.7.<br>After 5 epochs, we begun halving the learning rate every half epoch. We trained our models<br>for a total of 7.5 epochs.<br>· We used batches of 128 sequences for the gradient and divided it the size of the batch<br>(namely, 128).<br>· Although LSTMs tend to not suffer from the vanishing gradient problem, they can have<br>exploding gradients. Thus we enforced a hard constraint on the norm of the gradient [10,<br>25] by scaling it when its norm exceeded a threshold. For each training batch, we compute<br>s = 1191|2, where g is the gradient divided by 128. If s > 5, we set g = 5g.<br>s<br>· Different sentences have different lengths. Most sentences are short (e.g., length 20-30)<br>but some sentences are long (e.g., length > 100), so a minibatch of 128 randomly chosen<br>training sentences will have many short sentences and few long sentences, and as a result,<br>much of the computation in the minibatch is wasted. To address this problem, we made sure<br>that all sentences in a minibatch are roughly of the same length, yielding a 2x speedup.</p>\n<h1 id='53' style='font-size:20px'>3.5 Parallelization</h1>\n<p id='54' data-category='paragraph' style='font-size:16px'>A C++ implementation of deep LSTM with the configuration from the previous section on a sin-<br>gle GPU processes a speed of approximately 1,700 words per second. This was too slow for our<br>purposes, so we parallelized our model using an 8-GPU machine. Each layer of the LSTM was<br>executed on a different GPU and communicated its activations to the next GPU / layer as soon as<br>they were computed. Our models have 4 layers of LSTMs, each of which resides on a separate<br>GPU. The remaining 4 GPUs were used to parallelize the softmax, so each GPU was responsible<br>for multiplying by a 1000 x 20000 matrix. The resulting implementation achieved a speed of 6,300<br>(both English and French) words per second with a minibatch size of 128. Training took about a ten<br>days with this implementation.</p>\n<p id='55' data-category='paragraph' style='font-size:22px'>3.6 Experimental Results</p>\n<p id='56' data-category='paragraph' style='font-size:16px'>We used the cased BLEU score [24] to evaluate the quality of our translations. We computed our<br>BLEU scores using multi-bleu · pl 1 the tokenized predictions and ground truth. This way<br>on<br>of evaluating the BELU score is consistent with [5] and [2], and reproduces the 33.3 score of [29].<br>However, if we evaluate the best WMT' 14 system [9] (whose predictions can be downloaded from<br>statmt · org \\matrix) in this manner, we get 37.0, which is greater than the 35.8 reported by<br>statmt · org \\matrix.</p>\n<br><p id='57' data-category='paragraph' style='font-size:16px'>The results are presented in tables 1 and 2. Our best results are obtained with an ensemble of LSTMs<br>that differ in their random initializations and in the random order of minibatches. While the decoded<br>translations of the LSTM ensemble do not outperform the best WMT' 14 system, it is the first time<br>that a pure neural translation system outperforms a phrase-based SMT baseline on a large scale MT</p>\n<p id='58' data-category='footnote' style='font-size:14px'>1There several variants of the BLEU score, and each variant is defined with a perl script.</p>\n<footer id='59' style='font-size:18px'>5</footer>", "markdown": "# Sequence to Sequence Learning\nwith Neural Networks\n\n| Ilya Sutskever | Oriol Vinyals | Quoc V. Le |\n| --- | --- | --- |\n| Google | Google | Google |\n| ilyasu@google .com | vinyal s@google · com | qvl @google.com |\n\n\nAbstract\n\nDeep Neural Networks (DNNs) are powerful models that have achieved excel-\nlent performance on difficult learning tasks. Although DNNs work well whenever\nlarge labeled training sets are available, they cannot be used to map sequences to\nsequences. In this paper, we present a general end-to-end approach to sequence\nlearning that makes minimal assumptions on the sequence structure. Our method\nuses a multilayered Long Short-Term Memory (LSTM) to map the input sequence\nto a vector of a fixed dimensionality, and then another deep LSTM to decode the\ntarget sequence from the vector. Our main result is that on an English to French\ntranslation task from the WMT' 14 dataset, the translations produced by the LSTM\nachieve a BLEU score of 34.8 on the entire test set, where the LSTM's BLEU\nscore was penalized on out-of-vocabulary words. Additionally, the LSTM did not\nhave difficulty on long sentences. For comparison, a phrase-based SMT system\nachieves a BLEU score of 33.3 on the same dataset. When we used the LSTM\nto rerank the 1000 hypotheses produced by the aforementioned SMT system, its\nBLEU score increases to 36.5, which is close to the previous best result on this\ntask. The LSTM also learned sensible phrase and sentence representations that\nare sensitive to word order and are relatively invariant to the active and the pas-\nsive voice. Finally, we found that reversing the order of the words in all source\nsentences (but not target sentences) improved the LSTM's performance markedly,\nbecause doing so introduced many short term dependencies between the source\nand the target sentence which made the optimization problem easier.\n\n1 Introduction\n\nDeep Neural Networks (DNNs) are extremely powerful machine learning models that achieve ex-\ncellent performance on difficult problems such as speech recognition [13, 7] and visual object recog-\nnition [19, 6, 21, 20]. DNNs are powerful because they can perform arbitrary parallel computation\nfor a modest number of steps. A surprising example of the power of DNNs is their ability to sort\nN N-bit numbers using only 2 hidden layers of quadratic size [27]. So, while neural networks are\nrelated to conventional statistical models, they learn an intricate computation. Furthermore, large\nDNNs can be trained with supervised backpropagation whenever the labeled training set has enough\ninformation to specify the network's parameters. Thus, if there exists a parameter setting of a large\nDNN that achieves good results (for example, because humans can solve the task very rapidly),\nsupervised backpropagation will find these parameters and solve the problem.\n\nDespite their flexibility and power, DNNs can only be applied to problems whose inputs and targets\ncan be sensibly encoded with vectors of fixed dimensionality. It is a significant limitation, since\nmany important problems are best expressed with sequences whose lengths are not known a-priori.\nFor example, speech recognition and machine translation are sequential problems. Likewise, ques-\ntion answering can also be seen as mapping a sequence of words representing the question to a\n\n2014\nDec\n14\n[cs.CL]\narXiv:1409.3215v3\n\n1\n\nsequence of words representing the answer. It is therefore clear that a domain-independent method\nthat learns to map sequences to sequences would be useful.\n\nSequences pose a challenge for DNNs because they require that the dimensionality of the inputs and\noutputs is known and fixed. In this paper, we show that a straightforward application of the Long\nShort-Term Memory (LSTM) architecture [16] can solve general sequence to sequence problems.\nThe idea is to use one LSTM to read the input sequence, one timestep at a time, to obtain large fixed-\ndimensional vector representation, and then to use another LSTM to extract the output sequence\nfrom that vector (fig. 1). The second LSTM is essentially a recurrent neural network language model\n[28, 23, 30] except that it is conditioned on the input sequence. The LSTM's ability to successfully\nlearn on data with long range temporal dependencies makes it a natural choice for this application\ndue to the considerable time lag between the inputs and their corresponding outputs (fig. 1).\n\nThere have been a number of related attempts to address the general sequence to sequence learning\nproblem with neural networks. Our approach is closely related to Kalchbrenner and Blunsom [18]\nwho were the first to map the entire input sentence to vector, and is related to Cho et al. [5] although\nthe latter was used only for rescoring hypotheses produced by a phrase-based system. Graves [10]\nintroduced a novel differentiable attention mechanism that allows neural networks to focus on dif-\nferent parts of their input, and an elegant variant of this idea was successfully applied to machine\ntranslation by Bahdanau et al. [2]. The Connectionist Sequence Classification is another popular\ntechnique for mapping sequences to sequences with neural networks, but it assumes a monotonic\nalignment between the inputs and the outputs [1 1].\n\n![image](/image/placeholder)\nW X Y Z <EOS>\nT T ↑\nA B C <EOS> w X Y Z\n\nFigure 1: Our model reads an input sentence \"ABC\" and produces \"WXYZ\" as the output sentence. The\nmodel stops making predictions after outputting the end-of-sentence token. Note that the LSTM reads the\ninput sentence in reverse, because doing so introduces many short term dependencies in the data that make the\noptimization problem much easier.\n\nThe main result of this work is the following. On the WMT' 14 English to French translation task,\nwe obtained a BLEU score of 34.81 by directly extracting translations from an ensemble of 5 deep\nLSTMs (with 384M parameters and 8,000 dimensional state each) using a simple left-to-right beam-\nsearch decoder. This is by far the best result achieved by direct translation with large neural net-\nworks. For comparison, the BLEU score of an SMT baseline on this dataset is 33.30 [29]. The 34.81\nBLEU score was achieved by an LSTM with a vocabulary of 80k words, so the score was penalized\nwhenever the reference translation contained a word not covered by these 80k. This result shows\nthat a relatively unoptimized small-vocabulary neural network architecture which has much room\nfor improvement outperforms a phrase-based SMT system.\n\nFinally, we used the LSTM to rescore the publicly available 1000-best lists of the SMT baseline on\nthe same task [29]. By doing so, we obtained a BLEU score of 36.5, which improves the baseline by\n3.2 BLEU points and is close to the previous best published result on this task (which is 37.0 [9]).\n\nSurprisingly, the LSTM did not suffer on very long sentences, despite the recent experience of other\nresearchers with related architectures [26]. We were able to do well on long sentences because we\nreversed the order of words in the source sentence but not the target sentences in the training and test\nset. By doing so, we introduced many short term dependencies that made the optimization problem\nmuch simpler (see sec. 2 and 3.3). As a result, SGD could learn LSTMs that had no trouble with\nlong sentences. The simple trick of reversing the words in the source sentence is one of the key\ntechnical contributions of this work.\n\nA useful property of the LSTM is that it learns to map an input sentence of variable length into\na fixed-dimensional vector representation. Given that translations tend to be paraphrases of the\nsource sentences, the translation objective encourages the LSTM to find sentence representations\nthat capture their meaning, as sentences with similar meanings are close to each other while different\n\n2\n\nsentences meanings will be far. A qualitative evaluation supports this claim, showing that our model\nis aware of word order and is fairly invariant to the active and passive voice.\n\n2 The model\n\nThe Recurrent Neural Network (RNN) [31, 28] is a natural generalization of feedforward neural\nnetworks to sequences. Given a sequence of inputs (x1, . · .,XT), a standard RNN computes a\nsequence of outputs (y1,· · . , YT) by iterating the following equation:\n\n$$\\begin{array}{l l l}{{h_{t}}}&{{=}}&{{\\mathrm{sigm}\\left(W^{\\mathrm{hx}}x_{t}+W^{\\mathrm{hh}}h_{t-1}\\right)}}\\\\ {{y_{t}}}&{{=}}&{{W^{\\mathrm{yh}}h_{t}}}\\end{array}$$\n\nThe RNN can easily map sequences to sequences whenever the alignment between the inputs the\noutputs is known ahead of time. However, it is not clear how to apply an RNN to problems whose\ninput and the output sequences have different lengths with complicated and non-monotonic relation-\nships.\n\nThe simplest strategy for general sequence learning is to map the input sequence to a fixed-sized\nvector using one RNN, and then to map the vector to the target sequence with another RNN (this\napproach has also been taken by Cho et al. [5]). While it could work in principle since the RNN is\nprovided with all the relevant information, it would be difficult to train the RNNs due to the resulting\nlong term dependencies (figure 1) [14, 4, 16, 15]. However, the Long Short-Term Memory (LSTM)\n[16] is known to learn problems with long range temporal dependencies, so an LSTM may succeed\nin this setting.\n\nThe goal of the LSTM is to estimate the conditional probability p(y1, . : , YT' x1,···, xT) where\n(x1, · · · , xT) is an input sequence and Y1, · · · , YT' is its corresponding output sequence whose length\nT' may differ from T. The LSTM computes this conditional probability by first obtaining the fixed-\ndimensional representation v of the input sequence (x1,.. · , xT) given by the last hidden state of the\nLSTM, and then computing the probability of y1, · · · , YT' with a standard LSTM-LM formulation\nwhose initial hidden state is set to the representation v of x1, · · · , XT:\n\n$$p(y_{1},\\cdot\\cdot\\cdot,y_{T^{\\prime}}|x_{1},\\cdot\\cdot\\cdot,x_{T})=\\prod_{t=1}^{T^{\\prime}}p(y_{t}|v,y_{1},\\cdot\\cdot\\cdot,y_{t-1})$$\n\n(1)\n\nIn this equation, each p(yt|v, y1, · · · , yt-1) distribution is represented with a softmax over all the\nwords in the vocabulary. We use the LSTM formulation from Graves [10]. Note that we require that\neach sentence ends with a special end-of-sentence symbol \"<EOS>\", which enables the model to\ndefine a distribution over sequences of all possible lengths. The overall scheme is outlined in figure\n· <EOS>\" and then uses\n1, where the shown LSTM computes the representation of \"A\", \"B\" , \"C\" ,\nthis representation to compute the probability of \"W\", \"X\", \"Y\" \"Z\" , <EOS>\"\n\"\n,\n\nOur actual models differ from the above description in three important ways. First, we used two\ndifferent LSTMs: one for the input sequence and another for the output sequence, because doing\nso increases the number model parameters at negligible computational cost and makes it natural to\ntrain the LSTM on multiple language pairs simultaneously [18]. Second, we found that deep LSTMs\nsignificantly outperformed shallow LSTMs, so we chose an LSTM with four layers. Third, we found\nit extremely valuable to reverse the order of the words of the input sentence. So for example, instead\nof mapping the sentence a, b, c to the sentence �, �, % the LSTM is asked to map c, b, a to �, �, %\nwhere �, �, づ is the translation of a, b, c. This way, a is in close proximity to �, bis fairly close to �,\nand so on, a fact that makes it easy for SGD to \"establish communication\" between the input and the\noutput. We found this simple data transformation to greatly improve the performance of the LSTM.\n\n3 Experiments\n\nWe applied our method to the WMT' 14 English to French MT task in two ways. We used it to\ndirectly translate the input sentence without using a reference SMT system and we it to rescore the\nn-best lists of an SMT baseline. We report the accuracy of these translation methods, present sample\ntranslations, and visualize the resulting sentence representation.\n\n3\n\n3.1 Dataset details\n\nWe used the WMT' 14 English to French dataset. We trained our models on a subset of 12M sen-\ntences consisting of 348M French words and 304M English words, which is a clean \"selected\"\nsubset from [29]. We chose this translation task and this specific training set subset because of the\npublic availability of a tokenized training and test set together with 1000-best lists from the baseline\nSMT [29].\n\nAs typical neural language models rely on a vector representation for each word, we used a fixed\nvocabulary for both languages. We used 160,000 of the most frequent words for the source language\nand 80,000 of the most frequent words for the target language. Every out-of-vocabulary word was\nreplaced with a special \"UNK\" token.\n\n3.2 Decoding and Rescoring\n\nThe core of our experiments involved training a large deep LSTM on many sentence pairs. We\ntrained it by maximizing the log probability of a correct translation T given the source sentence S,\nso the training objective is\n\n$$\\textstyle{1/|{\\cal G}|}_{(T,S)\\in{\\cal S}}\\log p(T|S)$$\n\nwhere s is the training set. Once training is complete, we produce translations by finding the most\nlikely translation according to the LSTM:\n\n$${\\hat{T}}=\\arg\\operatorname*{max}_{T}p(T|S)$$\n\n(2)\n\nWe search for the most likely translation using a simple left-to-right beam search decoder which\nmaintains a small number B of partial hypotheses, where a partial hypothesis is a prefix of some\ntranslation. At each timestep we extend each partial hypothesis in the beam with every possible\nword in the vocabulary. This greatly increases the number of the hypotheses so we discard all but\nthe B most likely hypotheses according to the model's log probability. As soon as the \"<EOS>\"\nsymbol is appended to a hypothesis, it is removed from the beam and is added to the set of complete\nhypotheses. While this decoder is approximate, it is simple to implement. Interestingly, our system\nperforms well even with a beam size of 1, and a beam of size 2 provides most of the benefits of beam\nsearch (Table 1).\n\nWe also used the LSTM to rescore the 1000-best lists produced by the baseline system [29]. To\nrescore an n-best list, we computed the log probability of every hypothesis with our LSTM and took\nan even average with their score and the LSTM's score.\n\n# 3.3 Reversing the Source Sentences\n\nWhile the LSTM is capable of solving problems with long term dependencies, we discovered that\nthe LSTM learns much better when the source sentences are reversed (the target sentences are not\nreversed). By doing so, the LSTM's test perplexity dropped from 5.8 to 4.7, and the test BLEU\nscores of its decoded translations increased from 25.9 to 30.6.\n\nWhile we do not have a complete explanation to this phenomenon, we believe that it is caused by\nthe introduction of many short term dependencies to the dataset. Normally, when we concatenate a\nsource sentence with a target sentence, each word in the source sentence is far from its corresponding\nword in the target sentence. As a result, the problem has a large \"minimal time lag\" [17]. By\nreversing the words in the source sentence, the average distance between corresponding words in\nthe source and target language is unchanged. However, the first few words in the source language\nare now very close to the first few words in the target language, so the problem's minimal time lag is\ngreatly reduced. Thus, backpropagation has an easier time \"establishing communication\" between\nthe source sentence and the target sentence, which in turn results in substantially improved overall\nperformance.\n\nInitially, we believed that reversing the input sentences would only lead to more confident predic-\ntions in the early parts of the target sentence and to less confident predictions in the later parts. How-\never, LSTMs trained on reversed source sentences did much better on long sentences than LSTMs\n\n4\n\ntrained on the raw source sentences (see sec. 3.7), which suggests that reversing the input sentences\nresults in LSTMs with better memory utilization.\n\n3.4 Training details\n\nWe found that the LSTM models are fairly easy to train. We used deep LSTMs with 4 layers,\nwith 1000 cells at each layer and 1000 dimensional word embeddings, with an input vocabulary\nof 160,000 and an output vocabulary of 80,000. Thus the deep LSTM uses 8000 real numbers to\nrepresent a sentence. We found deep LSTMs to significantly outperform shallow LSTMs, where\neach additional layer reduced perplexity by nearly 10%, possibly due to their much larger hidden\nstate. We used a naive softmax over 80,000 words at each output. The resulting LSTM has 384M\nparameters of which 64M are pure recurrent connections (32M for the \"encoder\" LSTM and 32M\nfor the \"decoder\" LSTM). The complete training details are given below:\n\n- · We initialized all of the LSTM's parameters with the uniform distribution between -0.08\n- and 0.08\n- · We used stochastic gradient descent without momentum, with a fixed learning rate of 0.7.\n- After 5 epochs, we begun halving the learning rate every half epoch. We trained our models\n- for a total of 7.5 epochs.\n- · We used batches of 128 sequences for the gradient and divided it the size of the batch\n- (namely, 128).\n- · Although LSTMs tend to not suffer from the vanishing gradient problem, they can have\n- exploding gradients. Thus we enforced a hard constraint on the norm of the gradient [10,\n- 25] by scaling it when its norm exceeded a threshold. For each training batch, we compute\n- s = 1191|2, where g is the gradient divided by 128. If s > 5, we set g = 5g.\n- s\n- · Different sentences have different lengths. Most sentences are short (e.g., length 20-30)\n- but some sentences are long (e.g., length > 100), so a minibatch of 128 randomly chosen\n- training sentences will have many short sentences and few long sentences, and as a result,\n- much of the computation in the minibatch is wasted. To address this problem, we made sure\n- that all sentences in a minibatch are roughly of the same length, yielding a 2x speedup.\n\n\n# 3.5 Parallelization\n\nA C++ implementation of deep LSTM with the configuration from the previous section on a sin-\ngle GPU processes a speed of approximately 1,700 words per second. This was too slow for our\npurposes, so we parallelized our model using an 8-GPU machine. Each layer of the LSTM was\nexecuted on a different GPU and communicated its activations to the next GPU / layer as soon as\nthey were computed. Our models have 4 layers of LSTMs, each of which resides on a separate\nGPU. The remaining 4 GPUs were used to parallelize the softmax, so each GPU was responsible\nfor multiplying by a 1000 x 20000 matrix. The resulting implementation achieved a speed of 6,300\n(both English and French) words per second with a minibatch size of 128. Training took about a ten\ndays with this implementation.\n\n3.6 Experimental Results\n\nWe used the cased BLEU score [24] to evaluate the quality of our translations. We computed our\nBLEU scores using multi-bleu · pl 1 the tokenized predictions and ground truth. This way\non\nof evaluating the BELU score is consistent with [5] and [2], and reproduces the 33.3 score of [29].\nHowever, if we evaluate the best WMT' 14 system [9] (whose predictions can be downloaded from\nstatmt · org \\matrix) in this manner, we get 37.0, which is greater than the 35.8 reported by\nstatmt · org \\matrix.\n\nThe results are presented in tables 1 and 2. Our best results are obtained with an ensemble of LSTMs\nthat differ in their random initializations and in the random order of minibatches. While the decoded\ntranslations of the LSTM ensemble do not outperform the best WMT' 14 system, it is the first time\nthat a pure neural translation system outperforms a phrase-based SMT baseline on a large scale MT\n\n1There several variants of the BLEU score, and each variant is defined with a perl script.\n\n5", "text": "Sequence to Sequence Learning\nwith Neural Networks\nIlya Sutskever Oriol Vinyals Quoc V. Le\n Google Google Google\n ilyasu@google .com vinyal s@google · com qvl @google.com\nAbstract\nDeep Neural Networks (DNNs) are powerful models that have achieved excel-\nlent performance on difficult learning tasks. Although DNNs work well whenever\nlarge labeled training sets are available, they cannot be used to map sequences to\nsequences. In this paper, we present a general end-to-end approach to sequence\nlearning that makes minimal assumptions on the sequence structure. Our method\nuses a multilayered Long Short-Term Memory (LSTM) to map the input sequence\nto a vector of a fixed dimensionality, and then another deep LSTM to decode the\ntarget sequence from the vector. Our main result is that on an English to French\ntranslation task from the WMT' 14 dataset, the translations produced by the LSTM\nachieve a BLEU score of 34.8 on the entire test set, where the LSTM's BLEU\nscore was penalized on out-of-vocabulary words. Additionally, the LSTM did not\nhave difficulty on long sentences. For comparison, a phrase-based SMT system\nachieves a BLEU score of 33.3 on the same dataset. When we used the LSTM\nto rerank the 1000 hypotheses produced by the aforementioned SMT system, its\nBLEU score increases to 36.5, which is close to the previous best result on this\ntask. The LSTM also learned sensible phrase and sentence representations that\nare sensitive to word order and are relatively invariant to the active and the pas-\nsive voice. Finally, we found that reversing the order of the words in all source\nsentences (but not target sentences) improved the LSTM's performance markedly,\nbecause doing so introduced many short term dependencies between the source\nand the target sentence which made the optimization problem easier.\n1 Introduction\nDeep Neural Networks (DNNs) are extremely powerful machine learning models that achieve ex-\ncellent performance on difficult problems such as speech recognition [13, 7] and visual object recog-\nnition [19, 6, 21, 20]. DNNs are powerful because they can perform arbitrary parallel computation\nfor a modest number of steps. A surprising example of the power of DNNs is their ability to sort\nN N-bit numbers using only 2 hidden layers of quadratic size [27]. So, while neural networks are\nrelated to conventional statistical models, they learn an intricate computation. Furthermore, large\nDNNs can be trained with supervised backpropagation whenever the labeled training set has enough\ninformation to specify the network's parameters. Thus, if there exists a parameter setting of a large\nDNN that achieves good results (for example, because humans can solve the task very rapidly),\nsupervised backpropagation will find these parameters and solve the problem.\nDespite their flexibility and power, DNNs can only be applied to problems whose inputs and targets\ncan be sensibly encoded with vectors of fixed dimensionality. It is a significant limitation, since\nmany important problems are best expressed with sequences whose lengths are not known a-priori.\nFor example, speech recognition and machine translation are sequential problems. Likewise, ques-\ntion answering can also be seen as mapping a sequence of words representing the question to a\n2014\nDec\n14\n[cs.CL]\narXiv:1409.3215v3\n1\nsequence of words representing the answer. It is therefore clear that a domain-independent method\nthat learns to map sequences to sequences would be useful.\nSequences pose a challenge for DNNs because they require that the dimensionality of the inputs and\noutputs is known and fixed. In this paper, we show that a straightforward application of the Long\nShort-Term Memory (LSTM) architecture [16] can solve general sequence to sequence problems.\nThe idea is to use one LSTM to read the input sequence, one timestep at a time, to obtain large fixed-\ndimensional vector representation, and then to use another LSTM to extract the output sequence\nfrom that vector (fig. 1). The second LSTM is essentially a recurrent neural network language model\n[28, 23, 30] except that it is conditioned on the input sequence. The LSTM's ability to successfully\nlearn on data with long range temporal dependencies makes it a natural choice for this application\ndue to the considerable time lag between the inputs and their corresponding outputs (fig. 1).\nThere have been a number of related attempts to address the general sequence to sequence learning\nproblem with neural networks. Our approach is closely related to Kalchbrenner and Blunsom [18]\nwho were the first to map the entire input sentence to vector, and is related to Cho et al. [5] although\nthe latter was used only for rescoring hypotheses produced by a phrase-based system. Graves [10]\nintroduced a novel differentiable attention mechanism that allows neural networks to focus on dif-\nferent parts of their input, and an elegant variant of this idea was successfully applied to machine\ntranslation by Bahdanau et al. [2]. The Connectionist Sequence Classification is another popular\ntechnique for mapping sequences to sequences with neural networks, but it assumes a monotonic\nalignment between the inputs and the outputs [1 1].\nW X Y Z <EOS>\nT T ↑\nA B C <EOS> w X Y Z\nFigure 1: Our model reads an input sentence \"ABC\" and produces \"WXYZ\" as the output sentence. The\nmodel stops making predictions after outputting the end-of-sentence token. Note that the LSTM reads the\ninput sentence in reverse, because doing so introduces many short term dependencies in the data that make the\noptimization problem much easier.\nThe main result of this work is the following. On the WMT' 14 English to French translation task,\nwe obtained a BLEU score of 34.81 by directly extracting translations from an ensemble of 5 deep\nLSTMs (with 384M parameters and 8,000 dimensional state each) using a simple left-to-right beam-\nsearch decoder. This is by far the best result achieved by direct translation with large neural net-\nworks. For comparison, the BLEU score of an SMT baseline on this dataset is 33.30 [29]. The 34.81\nBLEU score was achieved by an LSTM with a vocabulary of 80k words, so the score was penalized\nwhenever the reference translation contained a word not covered by these 80k. This result shows\nthat a relatively unoptimized small-vocabulary neural network architecture which has much room\nfor improvement outperforms a phrase-based SMT system.\nFinally, we used the LSTM to rescore the publicly available 1000-best lists of the SMT baseline on\nthe same task [29]. By doing so, we obtained a BLEU score of 36.5, which improves the baseline by\n3.2 BLEU points and is close to the previous best published result on this task (which is 37.0 [9]).\nSurprisingly, the LSTM did not suffer on very long sentences, despite the recent experience of other\nresearchers with related architectures [26]. We were able to do well on long sentences because we\nreversed the order of words in the source sentence but not the target sentences in the training and test\nset. By doing so, we introduced many short term dependencies that made the optimization problem\nmuch simpler (see sec. 2 and 3.3). As a result, SGD could learn LSTMs that had no trouble with\nlong sentences. The simple trick of reversing the words in the source sentence is one of the key\ntechnical contributions of this work.\nA useful property of the LSTM is that it learns to map an input sentence of variable length into\na fixed-dimensional vector representation. Given that translations tend to be paraphrases of the\nsource sentences, the translation objective encourages the LSTM to find sentence representations\nthat capture their meaning, as sentences with similar meanings are close to each other while different\n2\nsentences meanings will be far. A qualitative evaluation supports this claim, showing that our model\nis aware of word order and is fairly invariant to the active and passive voice.\n2 The model\nThe Recurrent Neural Network (RNN) [31, 28] is a natural generalization of feedforward neural\nnetworks to sequences. Given a sequence of inputs (x1, . · .,XT), a standard RNN computes a\nsequence of outputs (y1,· · . , YT) by iterating the following equation:\nht = sigm (Whx Xt + Whh ht-1) \nyt = Wyhht\nThe RNN can easily map sequences to sequences whenever the alignment between the inputs the\noutputs is known ahead of time. However, it is not clear how to apply an RNN to problems whose\ninput and the output sequences have different lengths with complicated and non-monotonic relation-\nships.\nThe simplest strategy for general sequence learning is to map the input sequence to a fixed-sized\nvector using one RNN, and then to map the vector to the target sequence with another RNN (this\napproach has also been taken by Cho et al. [5]). While it could work in principle since the RNN is\nprovided with all the relevant information, it would be difficult to train the RNNs due to the resulting\nlong term dependencies (figure 1) [14, 4, 16, 15]. However, the Long Short-Term Memory (LSTM)\n[16] is known to learn problems with long range temporal dependencies, so an LSTM may succeed\nin this setting.\nThe goal of the LSTM is to estimate the conditional probability p(y1, . : , YT' x1,···, xT) where\n(x1, · · · , xT) is an input sequence and Y1, · · · , YT' is its corresponding output sequence whose length\nT' may differ from T. The LSTM computes this conditional probability by first obtaining the fixed-\ndimensional representation v of the input sequence (x1,.. · , xT) given by the last hidden state of the\nLSTM, and then computing the probability of y1, · · · , YT' with a standard LSTM-LM formulation\nwhose initial hidden state is set to the representation v of x1, · · · , XT:\nT' \np(y1, . ··· YT' |X1,...,XT) = II p(yt|v, y1, · ··· yt-1) \nt=1\n(1)\nIn this equation, each p(yt|v, y1, · · · , yt-1) distribution is represented with a softmax over all the\nwords in the vocabulary. We use the LSTM formulation from Graves [10]. Note that we require that\neach sentence ends with a special end-of-sentence symbol \"<EOS>\", which enables the model to\ndefine a distribution over sequences of all possible lengths. The overall scheme is outlined in figure\n· <EOS>\" and then uses\n1, where the shown LSTM computes the representation of \"A\", \"B\" , \"C\" ,\nthis representation to compute the probability of \"W\", \"X\", \"Y\" \"Z\" , <EOS>\"\n\"\n,\nOur actual models differ from the above description in three important ways. First, we used two\ndifferent LSTMs: one for the input sequence and another for the output sequence, because doing\nso increases the number model parameters at negligible computational cost and makes it natural to\ntrain the LSTM on multiple language pairs simultaneously [18]. Second, we found that deep LSTMs\nsignificantly outperformed shallow LSTMs, so we chose an LSTM with four layers. Third, we found\nit extremely valuable to reverse the order of the words of the input sentence. So for example, instead\nof mapping the sentence a, b, c to the sentence �, �, % the LSTM is asked to map c, b, a to �, �, %\nwhere �, �, づ is the translation of a, b, c. This way, a is in close proximity to �, bis fairly close to �,\nand so on, a fact that makes it easy for SGD to \"establish communication\" between the input and the\noutput. We found this simple data transformation to greatly improve the performance of the LSTM.\n3 Experiments\nWe applied our method to the WMT' 14 English to French MT task in two ways. We used it to\ndirectly translate the input sentence without using a reference SMT system and we it to rescore the\nn-best lists of an SMT baseline. We report the accuracy of these translation methods, present sample\ntranslations, and visualize the resulting sentence representation.\n3\n3.1 Dataset details\nWe used the WMT' 14 English to French dataset. We trained our models on a subset of 12M sen-\ntences consisting of 348M French words and 304M English words, which is a clean \"selected\"\nsubset from [29]. We chose this translation task and this specific training set subset because of the\npublic availability of a tokenized training and test set together with 1000-best lists from the baseline\nSMT [29].\nAs typical neural language models rely on a vector representation for each word, we used a fixed\nvocabulary for both languages. We used 160,000 of the most frequent words for the source language\nand 80,000 of the most frequent words for the target language. Every out-of-vocabulary word was\nreplaced with a special \"UNK\" token.\n3.2 Decoding and Rescoring\nThe core of our experiments involved training a large deep LSTM on many sentence pairs. We\ntrained it by maximizing the log probability of a correct translation T given the source sentence S,\nso the training objective is\n1/S � log p(T|S) \n(T,S)ES\nwhere s is the training set. Once training is complete, we produce translations by finding the most\nlikely translation according to the LSTM:\nT = arg max p(T|S) \nT\n(2)\nWe search for the most likely translation using a simple left-to-right beam search decoder which\nmaintains a small number B of partial hypotheses, where a partial hypothesis is a prefix of some\ntranslation. At each timestep we extend each partial hypothesis in the beam with every possible\nword in the vocabulary. This greatly increases the number of the hypotheses so we discard all but\nthe B most likely hypotheses according to the model's log probability. As soon as the \"<EOS>\"\nsymbol is appended to a hypothesis, it is removed from the beam and is added to the set of complete\nhypotheses. While this decoder is approximate, it is simple to implement. Interestingly, our system\nperforms well even with a beam size of 1, and a beam of size 2 provides most of the benefits of beam\nsearch (Table 1).\nWe also used the LSTM to rescore the 1000-best lists produced by the baseline system [29]. To\nrescore an n-best list, we computed the log probability of every hypothesis with our LSTM and took\nan even average with their score and the LSTM's score.\n3.3 Reversing the Source Sentences\nWhile the LSTM is capable of solving problems with long term dependencies, we discovered that\nthe LSTM learns much better when the source sentences are reversed (the target sentences are not\nreversed). By doing so, the LSTM's test perplexity dropped from 5.8 to 4.7, and the test BLEU\nscores of its decoded translations increased from 25.9 to 30.6.\nWhile we do not have a complete explanation to this phenomenon, we believe that it is caused by\nthe introduction of many short term dependencies to the dataset. Normally, when we concatenate a\nsource sentence with a target sentence, each word in the source sentence is far from its corresponding\nword in the target sentence. As a result, the problem has a large \"minimal time lag\" [17]. By\nreversing the words in the source sentence, the average distance between corresponding words in\nthe source and target language is unchanged. However, the first few words in the source language\nare now very close to the first few words in the target language, so the problem's minimal time lag is\ngreatly reduced. Thus, backpropagation has an easier time \"establishing communication\" between\nthe source sentence and the target sentence, which in turn results in substantially improved overall\nperformance.\nInitially, we believed that reversing the input sentences would only lead to more confident predic-\ntions in the early parts of the target sentence and to less confident predictions in the later parts. How-\never, LSTMs trained on reversed source sentences did much better on long sentences than LSTMs\n4\ntrained on the raw source sentences (see sec. 3.7), which suggests that reversing the input sentences\nresults in LSTMs with better memory utilization.\n3.4 Training details\nWe found that the LSTM models are fairly easy to train. We used deep LSTMs with 4 layers,\nwith 1000 cells at each layer and 1000 dimensional word embeddings, with an input vocabulary\nof 160,000 and an output vocabulary of 80,000. Thus the deep LSTM uses 8000 real numbers to\nrepresent a sentence. We found deep LSTMs to significantly outperform shallow LSTMs, where\neach additional layer reduced perplexity by nearly 10%, possibly due to their much larger hidden\nstate. We used a naive softmax over 80,000 words at each output. The resulting LSTM has 384M\nparameters of which 64M are pure recurrent connections (32M for the \"encoder\" LSTM and 32M\nfor the \"decoder\" LSTM). The complete training details are given below:\n· We initialized all of the LSTM's parameters with the uniform distribution between -0.08\nand 0.08\n· We used stochastic gradient descent without momentum, with a fixed learning rate of 0.7.\nAfter 5 epochs, we begun halving the learning rate every half epoch. We trained our models\nfor a total of 7.5 epochs.\n· We used batches of 128 sequences for the gradient and divided it the size of the batch\n(namely, 128).\n· Although LSTMs tend to not suffer from the vanishing gradient problem, they can have\nexploding gradients. Thus we enforced a hard constraint on the norm of the gradient [10,\n25] by scaling it when its norm exceeded a threshold. For each training batch, we compute\ns = 1191|2, where g is the gradient divided by 128. If s > 5, we set g = 5g.\ns\n· Different sentences have different lengths. Most sentences are short (e.g., length 20-30)\nbut some sentences are long (e.g., length > 100), so a minibatch of 128 randomly chosen\ntraining sentences will have many short sentences and few long sentences, and as a result,\nmuch of the computation in the minibatch is wasted. To address this problem, we made sure\nthat all sentences in a minibatch are roughly of the same length, yielding a 2x speedup.\n3.5 Parallelization\nA C++ implementation of deep LSTM with the configuration from the previous section on a sin-\ngle GPU processes a speed of approximately 1,700 words per second. This was too slow for our\npurposes, so we parallelized our model using an 8-GPU machine. Each layer of the LSTM was\nexecuted on a different GPU and communicated its activations to the next GPU / layer as soon as\nthey were computed. Our models have 4 layers of LSTMs, each of which resides on a separate\nGPU. The remaining 4 GPUs were used to parallelize the softmax, so each GPU was responsible\nfor multiplying by a 1000 x 20000 matrix. The resulting implementation achieved a speed of 6,300\n(both English and French) words per second with a minibatch size of 128. Training took about a ten\ndays with this implementation.\n3.6 Experimental Results\nWe used the cased BLEU score [24] to evaluate the quality of our translations. We computed our\nBLEU scores using multi-bleu · pl 1 the tokenized predictions and ground truth. This way\non\nof evaluating the BELU score is consistent with [5] and [2], and reproduces the 33.3 score of [29].\nHowever, if we evaluate the best WMT' 14 system [9] (whose predictions can be downloaded from\nstatmt · org \\matrix) in this manner, we get 37.0, which is greater than the 35.8 reported by\nstatmt · org \\matrix.\nThe results are presented in tables 1 and 2. Our best results are obtained with an ensemble of LSTMs\nthat differ in their random initializations and in the random order of minibatches. While the decoded\ntranslations of the LSTM ensemble do not outperform the best WMT' 14 system, it is the first time\nthat a pure neural translation system outperforms a phrase-based SMT baseline on a large scale MT\n1There several variants of the BLEU score, and each variant is defined with a perl script.\n5"}, "elements": [{"category": "heading1", "content": {"html": "<h1 id='0' style='font-size:22px'>Sequence to Sequence Learning<br>with Neural Networks</h1>", "markdown": "# Sequence to Sequence Learning\nwith Neural Networks", "text": "Sequence to Sequence Learning\nwith Neural Networks"}, "coordinates": [{"x": 0.3056, "y": 0.1362}, {"x": 0.6948, "y": 0.1362}, {"x": 0.6948, "y": 0.1864}, {"x": 0.3056, "y": 0.1864}], "id": 0, "page": 1}, {"base64_encoding": "", "category": "table", "content": {"html": "<table id='1' style='font-size:18px'><thead></thead><tbody><tr><td>Ilya Sutskever</td><td>Oriol Vinyals</td><td>Quoc V. Le</td></tr><tr><td>Google</td><td>Google</td><td>Google</td></tr><tr><td>ilyasu@google .com</td><td>vinyal s@google · com</td><td>qvl @google.com</td></tr></tbody></table>", "markdown": "| Ilya Sutskever | Oriol Vinyals | Quoc V. Le |\n| --- | --- | --- |\n| Google | Google | Google |\n| ilyasu@google .com | vinyal s@google · com | qvl @google.com |\n", "text": "Ilya Sutskever Oriol Vinyals Quoc V. Le\n Google Google Google\n ilyasu@google .com vinyal s@google · com qvl @google.com"}, "coordinates": [{"x": 0.2103, "y": 0.2339}, {"x": 0.7943, "y": 0.2339}, {"x": 0.7943, "y": 0.2798}, {"x": 0.2103, "y": 0.2798}], "id": 1, "page": 1}, {"category": "paragraph", "content": {"html": "<p id='2' data-category='paragraph' style='font-size:20px'>Abstract</p>", "markdown": "Abstract", "text": "Abstract"}, "coordinates": [{"x": 0.4607, "y": 0.3134}, {"x": 0.5404, "y": 0.3134}, {"x": 0.5404, "y": 0.3306}, {"x": 0.4607, "y": 0.3306}], "id": 2, "page": 1}, {"category": "paragraph", "content": {"html": "<p id='3' data-category='paragraph' style='font-size:16px'>Deep Neural Networks (DNNs) are powerful models that have achieved excel-<br>lent performance on difficult learning tasks. Although DNNs work well whenever<br>large labeled training sets are available, they cannot be used to map sequences to<br>sequences. In this paper, we present a general end-to-end approach to sequence<br>learning that makes minimal assumptions on the sequence structure. Our method<br>uses a multilayered Long Short-Term Memory (LSTM) to map the input sequence<br>to a vector of a fixed dimensionality, and then another deep LSTM to decode the<br>target sequence from the vector. Our main result is that on an English to French<br>translation task from the WMT' 14 dataset, the translations produced by the LSTM<br>achieve a BLEU score of 34.8 on the entire test set, where the LSTM's BLEU<br>score was penalized on out-of-vocabulary words. Additionally, the LSTM did not<br>have difficulty on long sentences. For comparison, a phrase-based SMT system<br>achieves a BLEU score of 33.3 on the same dataset. When we used the LSTM<br>to rerank the 1000 hypotheses produced by the aforementioned SMT system, its<br>BLEU score increases to 36.5, which is close to the previous best result on this<br>task. The LSTM also learned sensible phrase and sentence representations that<br>are sensitive to word order and are relatively invariant to the active and the pas-<br>sive voice. Finally, we found that reversing the order of the words in all source<br>sentences (but not target sentences) improved the LSTM's performance markedly,<br>because doing so introduced many short term dependencies between the source<br>and the target sentence which made the optimization problem easier.</p>", "markdown": "Deep Neural Networks (DNNs) are powerful models that have achieved excel-\nlent performance on difficult learning tasks. Although DNNs work well whenever\nlarge labeled training sets are available, they cannot be used to map sequences to\nsequences. In this paper, we present a general end-to-end approach to sequence\nlearning that makes minimal assumptions on the sequence structure. Our method\nuses a multilayered Long Short-Term Memory (LSTM) to map the input sequence\nto a vector of a fixed dimensionality, and then another deep LSTM to decode the\ntarget sequence from the vector. Our main result is that on an English to French\ntranslation task from the WMT' 14 dataset, the translations produced by the LSTM\nachieve a BLEU score of 34.8 on the entire test set, where the LSTM's BLEU\nscore was penalized on out-of-vocabulary words. Additionally, the LSTM did not\nhave difficulty on long sentences. For comparison, a phrase-based SMT system\nachieves a BLEU score of 33.3 on the same dataset. When we used the LSTM\nto rerank the 1000 hypotheses produced by the aforementioned SMT system, its\nBLEU score increases to 36.5, which is close to the previous best result on this\ntask. The LSTM also learned sensible phrase and sentence representations that\nare sensitive to word order and are relatively invariant to the active and the pas-\nsive voice. Finally, we found that reversing the order of the words in all source\nsentences (but not target sentences) improved the LSTM's performance markedly,\nbecause doing so introduced many short term dependencies between the source\nand the target sentence which made the optimization problem easier.", "text": "Deep Neural Networks (DNNs) are powerful models that have achieved excel-\nlent performance on difficult learning tasks. Although DNNs work well whenever\nlarge labeled training sets are available, they cannot be used to map sequences to\nsequences. In this paper, we present a general end-to-end approach to sequence\nlearning that makes minimal assumptions on the sequence structure. Our method\nuses a multilayered Long Short-Term Memory (LSTM) to map the input sequence\nto a vector of a fixed dimensionality, and then another deep LSTM to decode the\ntarget sequence from the vector. Our main result is that on an English to French\ntranslation task from the WMT' 14 dataset, the translations produced by the LSTM\nachieve a BLEU score of 34.8 on the entire test set, where the LSTM's BLEU\nscore was penalized on out-of-vocabulary words. Additionally, the LSTM did not\nhave difficulty on long sentences. For comparison, a phrase-based SMT system\nachieves a BLEU score of 33.3 on the same dataset. When we used the LSTM\nto rerank the 1000 hypotheses produced by the aforementioned SMT system, its\nBLEU score increases to 36.5, which is close to the previous best result on this\ntask. The LSTM also learned sensible phrase and sentence representations that\nare sensitive to word order and are relatively invariant to the active and the pas-\nsive voice. Finally, we found that reversing the order of the words in all source\nsentences (but not target sentences) improved the LSTM's performance markedly,\nbecause doing so introduced many short term dependencies between the source\nand the target sentence which made the optimization problem easier."}, "coordinates": [{"x": 0.2313, "y": 0.3479}, {"x": 0.7699, "y": 0.3479}, {"x": 0.7699, "y": 0.6417}, {"x": 0.2313, "y": 0.6417}], "id": 3, "page": 1}, {"category": "paragraph", "content": {"html": "<p id='4' data-category='paragraph' style='font-size:18px'>1 Introduction</p>", "markdown": "1 Introduction", "text": "1 Introduction"}, "coordinates": [{"x": 0.174, "y": 0.6734}, {"x": 0.3148, "y": 0.6734}, {"x": 0.3148, "y": 0.6912}, {"x": 0.174, "y": 0.6912}], "id": 4, "page": 1}, {"category": "paragraph", "content": {"html": "<p id='5' data-category='paragraph' style='font-size:16px'>Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve ex-<br>cellent performance on difficult problems such as speech recognition [13, 7] and visual object recog-<br>nition [19, 6, 21, 20]. DNNs are powerful because they can perform arbitrary parallel computation<br>for a modest number of steps. A surprising example of the power of DNNs is their ability to sort<br>N N-bit numbers using only 2 hidden layers of quadratic size [27]. So, while neural networks are<br>related to conventional statistical models, they learn an intricate computation. Furthermore, large<br>DNNs can be trained with supervised backpropagation whenever the labeled training set has enough<br>information to specify the network's parameters. Thus, if there exists a parameter setting of a large<br>DNN that achieves good results (for example, because humans can solve the task very rapidly),<br>supervised backpropagation will find these parameters and solve the problem.</p>", "markdown": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve ex-\ncellent performance on difficult problems such as speech recognition [13, 7] and visual object recog-\nnition [19, 6, 21, 20]. DNNs are powerful because they can perform arbitrary parallel computation\nfor a modest number of steps. A surprising example of the power of DNNs is their ability to sort\nN N-bit numbers using only 2 hidden layers of quadratic size [27]. So, while neural networks are\nrelated to conventional statistical models, they learn an intricate computation. Furthermore, large\nDNNs can be trained with supervised backpropagation whenever the labeled training set has enough\ninformation to specify the network's parameters. Thus, if there exists a parameter setting of a large\nDNN that achieves good results (for example, because humans can solve the task very rapidly),\nsupervised backpropagation will find these parameters and solve the problem.", "text": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve ex-\ncellent performance on difficult problems such as speech recognition [13, 7] and visual object recog-\nnition [19, 6, 21, 20]. DNNs are powerful because they can perform arbitrary parallel computation\nfor a modest number of steps. A surprising example of the power of DNNs is their ability to sort\nN N-bit numbers using only 2 hidden layers of quadratic size [27]. So, while neural networks are\nrelated to conventional statistical models, they learn an intricate computation. Furthermore, large\nDNNs can be trained with supervised backpropagation whenever the labeled training set has enough\ninformation to specify the network's parameters. Thus, if there exists a parameter setting of a large\nDNN that achieves good results (for example, because humans can solve the task very rapidly),\nsupervised backpropagation will find these parameters and solve the problem."}, "coordinates": [{"x": 0.173, "y": 0.7077}, {"x": 0.8278, "y": 0.7077}, {"x": 0.8278, "y": 0.8483}, {"x": 0.173, "y": 0.8483}], "id": 5, "page": 1}, {"category": "paragraph", "content": {"html": "<br><p id='6' data-category='paragraph' style='font-size:16px'>Despite their flexibility and power, DNNs can only be applied to problems whose inputs and targets<br>can be sensibly encoded with vectors of fixed dimensionality. It is a significant limitation, since<br>many important problems are best expressed with sequences whose lengths are not known a-priori.<br>For example, speech recognition and machine translation are sequential problems. Likewise, ques-<br>tion answering can also be seen as mapping a sequence of words representing the question to a</p>", "markdown": "Despite their flexibility and power, DNNs can only be applied to problems whose inputs and targets\ncan be sensibly encoded with vectors of fixed dimensionality. It is a significant limitation, since\nmany important problems are best expressed with sequences whose lengths are not known a-priori.\nFor example, speech recognition and machine translation are sequential problems. Likewise, ques-\ntion answering can also be seen as mapping a sequence of words representing the question to a", "text": "Despite their flexibility and power, DNNs can only be applied to problems whose inputs and targets\ncan be sensibly encoded with vectors of fixed dimensionality. It is a significant limitation, since\nmany important problems are best expressed with sequences whose lengths are not known a-priori.\nFor example, speech recognition and machine translation are sequential problems. Likewise, ques-\ntion answering can also be seen as mapping a sequence of words representing the question to a"}, "coordinates": [{"x": 0.1734, "y": 0.8546}, {"x": 0.829, "y": 0.8546}, {"x": 0.829, "y": 0.9264}, {"x": 0.1734, "y": 0.9264}], "id": 6, "page": 1}, {"category": "header", "content": {"html": "<br><header id='7' style='font-size:14px'>2014<br>Dec<br>14<br>[cs.CL]<br>arXiv:1409.3215v3</header>", "markdown": "2014\nDec\n14\n[cs.CL]\narXiv:1409.3215v3", "text": "2014\nDec\n14\n[cs.CL]\narXiv:1409.3215v3"}, "coordinates": [{"x": 0.0209, "y": 0.2457}, {"x": 0.0625, "y": 0.2457}, {"x": 0.0625, "y": 0.6804}, {"x": 0.0209, "y": 0.6804}], "id": 7, "page": 1}, {"category": "footer", "content": {"html": "<footer id='8' style='font-size:14px'>1</footer>", "markdown": "1", "text": "1"}, "coordinates": [{"x": 0.4936, "y": 0.9478}, {"x": 0.5069, "y": 0.9478}, {"x": 0.5069, "y": 0.963}, {"x": 0.4936, "y": 0.963}], "id": 8, "page": 1}, {"category": "paragraph", "content": {"html": "<p id='9' data-category='paragraph' style='font-size:16px'>sequence of words representing the answer. It is therefore clear that a domain-independent method<br>that learns to map sequences to sequences would be useful.</p>", "markdown": "sequence of words representing the answer. It is therefore clear that a domain-independent method\nthat learns to map sequences to sequences would be useful.", "text": "sequence of words representing the answer. It is therefore clear that a domain-independent method\nthat learns to map sequences to sequences would be useful."}, "coordinates": [{"x": 0.1728, "y": 0.1052}, {"x": 0.8279, "y": 0.1052}, {"x": 0.8279, "y": 0.1339}, {"x": 0.1728, "y": 0.1339}], "id": 9, "page": 2}, {"category": "paragraph", "content": {"html": "<br><p id='10' data-category='paragraph' style='font-size:20px'>Sequences pose a challenge for DNNs because they require that the dimensionality of the inputs and<br>outputs is known and fixed. In this paper, we show that a straightforward application of the Long<br>Short-Term Memory (LSTM) architecture [16] can solve general sequence to sequence problems.<br>The idea is to use one LSTM to read the input sequence, one timestep at a time, to obtain large fixed-<br>dimensional vector representation, and then to use another LSTM to extract the output sequence<br>from that vector (fig. 1). The second LSTM is essentially a recurrent neural network language model<br>[28, 23, 30] except that it is conditioned on the input sequence. The LSTM's ability to successfully<br>learn on data with long range temporal dependencies makes it a natural choice for this application<br>due to the considerable time lag between the inputs and their corresponding outputs (fig. 1).</p>", "markdown": "Sequences pose a challenge for DNNs because they require that the dimensionality of the inputs and\noutputs is known and fixed. In this paper, we show that a straightforward application of the Long\nShort-Term Memory (LSTM) architecture [16] can solve general sequence to sequence problems.\nThe idea is to use one LSTM to read the input sequence, one timestep at a time, to obtain large fixed-\ndimensional vector representation, and then to use another LSTM to extract the output sequence\nfrom that vector (fig. 1). The second LSTM is essentially a recurrent neural network language model\n[28, 23, 30] except that it is conditioned on the input sequence. The LSTM's ability to successfully\nlearn on data with long range temporal dependencies makes it a natural choice for this application\ndue to the considerable time lag between the inputs and their corresponding outputs (fig. 1).", "text": "Sequences pose a challenge for DNNs because they require that the dimensionality of the inputs and\noutputs is known and fixed. In this paper, we show that a straightforward application of the Long\nShort-Term Memory (LSTM) architecture [16] can solve general sequence to sequence problems.\nThe idea is to use one LSTM to read the input sequence, one timestep at a time, to obtain large fixed-\ndimensional vector representation, and then to use another LSTM to extract the output sequence\nfrom that vector (fig. 1). The second LSTM is essentially a recurrent neural network language model\n[28, 23, 30] except that it is conditioned on the input sequence. The LSTM's ability to successfully\nlearn on data with long range temporal dependencies makes it a natural choice for this application\ndue to the considerable time lag between the inputs and their corresponding outputs (fig. 1)."}, "coordinates": [{"x": 0.1734, "y": 0.1405}, {"x": 0.8277, "y": 0.1405}, {"x": 0.8277, "y": 0.2661}, {"x": 0.1734, "y": 0.2661}], "id": 10, "page": 2}, {"category": "paragraph", "content": {"html": "<br><p id='11' data-category='paragraph' style='font-size:20px'>There have been a number of related attempts to address the general sequence to sequence learning<br>problem with neural networks. Our approach is closely related to Kalchbrenner and Blunsom [18]<br>who were the first to map the entire input sentence to vector, and is related to Cho et al. [5] although<br>the latter was used only for rescoring hypotheses produced by a phrase-based system. Graves [10]<br>introduced a novel differentiable attention mechanism that allows neural networks to focus on dif-<br>ferent parts of their input, and an elegant variant of this idea was successfully applied to machine<br>translation by Bahdanau et al. [2]. The Connectionist Sequence Classification is another popular<br>technique for mapping sequences to sequences with neural networks, but it assumes a monotonic<br>alignment between the inputs and the outputs [1 1].</p>", "markdown": "There have been a number of related attempts to address the general sequence to sequence learning\nproblem with neural networks. Our approach is closely related to Kalchbrenner and Blunsom [18]\nwho were the first to map the entire input sentence to vector, and is related to Cho et al. [5] although\nthe latter was used only for rescoring hypotheses produced by a phrase-based system. Graves [10]\nintroduced a novel differentiable attention mechanism that allows neural networks to focus on dif-\nferent parts of their input, and an elegant variant of this idea was successfully applied to machine\ntranslation by Bahdanau et al. [2]. The Connectionist Sequence Classification is another popular\ntechnique for mapping sequences to sequences with neural networks, but it assumes a monotonic\nalignment between the inputs and the outputs [1 1].", "text": "There have been a number of related attempts to address the general sequence to sequence learning\nproblem with neural networks. Our approach is closely related to Kalchbrenner and Blunsom [18]\nwho were the first to map the entire input sentence to vector, and is related to Cho et al. [5] although\nthe latter was used only for rescoring hypotheses produced by a phrase-based system. Graves [10]\nintroduced a novel differentiable attention mechanism that allows neural networks to focus on dif-\nferent parts of their input, and an elegant variant of this idea was successfully applied to machine\ntranslation by Bahdanau et al. [2]. The Connectionist Sequence Classification is another popular\ntechnique for mapping sequences to sequences with neural networks, but it assumes a monotonic\nalignment between the inputs and the outputs [1 1]."}, "coordinates": [{"x": 0.1733, "y": 0.2718}, {"x": 0.8278, "y": 0.2718}, {"x": 0.8278, "y": 0.3981}, {"x": 0.1733, "y": 0.3981}], "id": 11, "page": 2}, {"base64_encoding": "", "category": "figure", "content": {"html": "<figure id='12'><img style='font-size:16px' alt=\"W X Y Z <EOS>\nT T ↑\nA B C <EOS> w X Y Z\" data-coord=\"top-left:(257,674); bottom-right:(1019,837)\" /></figure>", "markdown": "![image](/image/placeholder)\nW X Y Z <EOS>\nT T ↑\nA B C <EOS> w X Y Z", "text": "W X Y Z <EOS>\nT T ↑\nA B C <EOS> w X Y Z"}, "coordinates": [{"x": 0.2018, "y": 0.4086}, {"x": 0.7993, "y": 0.4086}, {"x": 0.7993, "y": 0.5076}, {"x": 0.2018, "y": 0.5076}], "id": 12, "page": 2}, {"category": "paragraph", "content": {"html": "<p id='13' data-category='paragraph' style='font-size:14px'>Figure 1: Our model reads an input sentence \"ABC\" and produces \"WXYZ\" as the output sentence. The<br>model stops making predictions after outputting the end-of-sentence token. Note that the LSTM reads the<br>input sentence in reverse, because doing so introduces many short term dependencies in the data that make the<br>optimization problem much easier.</p>", "markdown": "Figure 1: Our model reads an input sentence \"ABC\" and produces \"WXYZ\" as the output sentence. The\nmodel stops making predictions after outputting the end-of-sentence token. Note that the LSTM reads the\ninput sentence in reverse, because doing so introduces many short term dependencies in the data that make the\noptimization problem much easier.", "text": "Figure 1: Our model reads an input sentence \"ABC\" and produces \"WXYZ\" as the output sentence. The\nmodel stops making predictions after outputting the end-of-sentence token. Note that the LSTM reads the\ninput sentence in reverse, because doing so introduces many short term dependencies in the data that make the\noptimization problem much easier."}, "coordinates": [{"x": 0.1737, "y": 0.5175}, {"x": 0.8284, "y": 0.5175}, {"x": 0.8284, "y": 0.5701}, {"x": 0.1737, "y": 0.5701}], "id": 13, "page": 2}, {"category": "paragraph", "content": {"html": "<p id='14' data-category='paragraph' style='font-size:20px'>The main result of this work is the following. On the WMT' 14 English to French translation task,<br>we obtained a BLEU score of 34.81 by directly extracting translations from an ensemble of 5 deep<br>LSTMs (with 384M parameters and 8,000 dimensional state each) using a simple left-to-right beam-<br>search decoder. This is by far the best result achieved by direct translation with large neural net-<br>works. For comparison, the BLEU score of an SMT baseline on this dataset is 33.30 [29]. The 34.81<br>BLEU score was achieved by an LSTM with a vocabulary of 80k words, so the score was penalized<br>whenever the reference translation contained a word not covered by these 80k. This result shows<br>that a relatively unoptimized small-vocabulary neural network architecture which has much room<br>for improvement outperforms a phrase-based SMT system.</p>", "markdown": "The main result of this work is the following. On the WMT' 14 English to French translation task,\nwe obtained a BLEU score of 34.81 by directly extracting translations from an ensemble of 5 deep\nLSTMs (with 384M parameters and 8,000 dimensional state each) using a simple left-to-right beam-\nsearch decoder. This is by far the best result achieved by direct translation with large neural net-\nworks. For comparison, the BLEU score of an SMT baseline on this dataset is 33.30 [29]. The 34.81\nBLEU score was achieved by an LSTM with a vocabulary of 80k words, so the score was penalized\nwhenever the reference translation contained a word not covered by these 80k. This result shows\nthat a relatively unoptimized small-vocabulary neural network architecture which has much room\nfor improvement outperforms a phrase-based SMT system.", "text": "The main result of this work is the following. On the WMT' 14 English to French translation task,\nwe obtained a BLEU score of 34.81 by directly extracting translations from an ensemble of 5 deep\nLSTMs (with 384M parameters and 8,000 dimensional state each) using a simple left-to-right beam-\nsearch decoder. This is by far the best result achieved by direct translation with large neural net-\nworks. For comparison, the BLEU score of an SMT baseline on this dataset is 33.30 [29]. The 34.81\nBLEU score was achieved by an LSTM with a vocabulary of 80k words, so the score was penalized\nwhenever the reference translation contained a word not covered by these 80k. This result shows\nthat a relatively unoptimized small-vocabulary neural network architecture which has much room\nfor improvement outperforms a phrase-based SMT system."}, "coordinates": [{"x": 0.1727, "y": 0.5828}, {"x": 0.8274, "y": 0.5828}, {"x": 0.8274, "y": 0.7097}, {"x": 0.1727, "y": 0.7097}], "id": 14, "page": 2}, {"category": "paragraph", "content": {"html": "<br><p id='15' data-category='paragraph' style='font-size:20px'>Finally, we used the LSTM to rescore the publicly available 1000-best lists of the SMT baseline on<br>the same task [29]. By doing so, we obtained a BLEU score of 36.5, which improves the baseline by<br>3.2 BLEU points and is close to the previous best published result on this task (which is 37.0 [9]).</p>", "markdown": "Finally, we used the LSTM to rescore the publicly available 1000-best lists of the SMT baseline on\nthe same task [29]. By doing so, we obtained a BLEU score of 36.5, which improves the baseline by\n3.2 BLEU points and is close to the previous best published result on this task (which is 37.0 [9]).", "text": "Finally, we used the LSTM to rescore the publicly available 1000-best lists of the SMT baseline on\nthe same task [29]. By doing so, we obtained a BLEU score of 36.5, which improves the baseline by\n3.2 BLEU points and is close to the previous best published result on this task (which is 37.0 [9])."}, "coordinates": [{"x": 0.173, "y": 0.7155}, {"x": 0.8273, "y": 0.7155}, {"x": 0.8273, "y": 0.7591}, {"x": 0.173, "y": 0.7591}], "id": 15, "page": 2}, {"category": "paragraph", "content": {"html": "<br><p id='16' data-category='paragraph' style='font-size:20px'>Surprisingly, the LSTM did not suffer on very long sentences, despite the recent experience of other<br>researchers with related architectures [26]. We were able to do well on long sentences because we<br>reversed the order of words in the source sentence but not the target sentences in the training and test<br>set. By doing so, we introduced many short term dependencies that made the optimization problem<br>much simpler (see sec. 2 and 3.3). As a result, SGD could learn LSTMs that had no trouble with<br>long sentences. The simple trick of reversing the words in the source sentence is one of the key<br>technical contributions of this work.</p>", "markdown": "Surprisingly, the LSTM did not suffer on very long sentences, despite the recent experience of other\nresearchers with related architectures [26]. We were able to do well on long sentences because we\nreversed the order of words in the source sentence but not the target sentences in the training and test\nset. By doing so, we introduced many short term dependencies that made the optimization problem\nmuch simpler (see sec. 2 and 3.3). As a result, SGD could learn LSTMs that had no trouble with\nlong sentences. The simple trick of reversing the words in the source sentence is one of the key\ntechnical contributions of this work.", "text": "Surprisingly, the LSTM did not suffer on very long sentences, despite the recent experience of other\nresearchers with related architectures [26]. We were able to do well on long sentences because we\nreversed the order of words in the source sentence but not the target sentences in the training and test\nset. By doing so, we introduced many short term dependencies that made the optimization problem\nmuch simpler (see sec. 2 and 3.3). As a result, SGD could learn LSTMs that had no trouble with\nlong sentences. The simple trick of reversing the words in the source sentence is one of the key\ntechnical contributions of this work."}, "coordinates": [{"x": 0.1732, "y": 0.7656}, {"x": 0.828, "y": 0.7656}, {"x": 0.828, "y": 0.8623}, {"x": 0.1732, "y": 0.8623}], "id": 16, "page": 2}, {"category": "paragraph", "content": {"html": "<p id='17' data-category='paragraph' style='font-size:16px'>A useful property of the LSTM is that it learns to map an input sentence of variable length into<br>a fixed-dimensional vector representation. Given that translations tend to be paraphrases of the<br>source sentences, the translation objective encourages the LSTM to find sentence representations<br>that capture their meaning, as sentences with similar meanings are close to each other while different</p>", "markdown": "A useful property of the LSTM is that it learns to map an input sentence of variable length into\na fixed-dimensional vector representation. Given that translations tend to be paraphrases of the\nsource sentences, the translation objective encourages the LSTM to find sentence representations\nthat capture their meaning, as sentences with similar meanings are close to each other while different", "text": "A useful property of the LSTM is that it learns to map an input sentence of variable length into\na fixed-dimensional vector representation. Given that translations tend to be paraphrases of the\nsource sentences, the translation objective encourages the LSTM to find sentence representations\nthat capture their meaning, as sentences with similar meanings are close to each other while different"}, "coordinates": [{"x": 0.1739, "y": 0.8694}, {"x": 0.8286, "y": 0.8694}, {"x": 0.8286, "y": 0.9261}, {"x": 0.1739, "y": 0.9261}], "id": 17, "page": 2}, {"category": "footer", "content": {"html": "<footer id='18' style='font-size:20px'>2</footer>", "markdown": "2", "text": "2"}, "coordinates": [{"x": 0.4927, "y": 0.9483}, {"x": 0.5076, "y": 0.9483}, {"x": 0.5076, "y": 0.9623}, {"x": 0.4927, "y": 0.9623}], "id": 18, "page": 2}, {"category": "paragraph", "content": {"html": "<p id='19' data-category='paragraph' style='font-size:14px'>sentences meanings will be far. A qualitative evaluation supports this claim, showing that our model<br>is aware of word order and is fairly invariant to the active and passive voice.</p>", "markdown": "sentences meanings will be far. A qualitative evaluation supports this claim, showing that our model\nis aware of word order and is fairly invariant to the active and passive voice.", "text": "sentences meanings will be far. A qualitative evaluation supports this claim, showing that our model\nis aware of word order and is fairly invariant to the active and passive voice."}, "coordinates": [{"x": 0.1728, "y": 0.105}, {"x": 0.8275, "y": 0.105}, {"x": 0.8275, "y": 0.1342}, {"x": 0.1728, "y": 0.1342}], "id": 19, "page": 3}, {"category": "paragraph", "content": {"html": "<p id='20' data-category='paragraph' style='font-size:18px'>2 The model</p>", "markdown": "2 The model", "text": "2 The model"}, "coordinates": [{"x": 0.1725, "y": 0.1527}, {"x": 0.2974, "y": 0.1527}, {"x": 0.2974, "y": 0.1695}, {"x": 0.1725, "y": 0.1695}], "id": 20, "page": 3}, {"category": "paragraph", "content": {"html": "<p id='21' data-category='paragraph' style='font-size:14px'>The Recurrent Neural Network (RNN) [31, 28] is a natural generalization of feedforward neural<br>networks to sequences. Given a sequence of inputs (x1, . · .,XT), a standard RNN computes a<br>sequence of outputs (y1,· · . , YT) by iterating the following equation:</p>", "markdown": "The Recurrent Neural Network (RNN) [31, 28] is a natural generalization of feedforward neural\nnetworks to sequences. Given a sequence of inputs (x1, . · .,XT), a standard RNN computes a\nsequence of outputs (y1,· · . , YT) by iterating the following equation:", "text": "The Recurrent Neural Network (RNN) [31, 28] is a natural generalization of feedforward neural\nnetworks to sequences. Given a sequence of inputs (x1, . · .,XT), a standard RNN computes a\nsequence of outputs (y1,· · . , YT) by iterating the following equation:"}, "coordinates": [{"x": 0.1734, "y": 0.184}, {"x": 0.8284, "y": 0.184}, {"x": 0.8284, "y": 0.229}, {"x": 0.1734, "y": 0.229}], "id": 21, "page": 3}, {"category": "equation", "content": {"html": "<p id='22' data-category='equation'>$$\\begin{array}{l l l}{{h_{t}}}&{{=}}&{{\\mathrm{sigm}\\left(W^{\\mathrm{hx}}x_{t}+W^{\\mathrm{hh}}h_{t-1}\\right)}}\\\\ {{y_{t}}}&{{=}}&{{W^{\\mathrm{yh}}h_{t}}}\\end{array}$$</p>", "markdown": "$$\\begin{array}{l l l}{{h_{t}}}&{{=}}&{{\\mathrm{sigm}\\left(W^{\\mathrm{hx}}x_{t}+W^{\\mathrm{hh}}h_{t-1}\\right)}}\\\\ {{y_{t}}}&{{=}}&{{W^{\\mathrm{yh}}h_{t}}}\\end{array}$$", "text": "ht = sigm (Whx Xt + Whh ht-1) \nyt = Wyhht"}, "coordinates": [{"x": 0.3727, "y": 0.2356}, {"x": 0.6218, "y": 0.2356}, {"x": 0.6218, "y": 0.2733}, {"x": 0.3727, "y": 0.2733}], "id": 22, "page": 3}, {"category": "paragraph", "content": {"html": "<br><p id='23' data-category='paragraph' style='font-size:14px'>The RNN can easily map sequences to sequences whenever the alignment between the inputs the<br>outputs is known ahead of time. However, it is not clear how to apply an RNN to problems whose<br>input and the output sequences have different lengths with complicated and non-monotonic relation-<br>ships.</p>", "markdown": "The RNN can easily map sequences to sequences whenever the alignment between the inputs the\noutputs is known ahead of time. However, it is not clear how to apply an RNN to problems whose\ninput and the output sequences have different lengths with complicated and non-monotonic relation-\nships.", "text": "The RNN can easily map sequences to sequences whenever the alignment between the inputs the\noutputs is known ahead of time. However, it is not clear how to apply an RNN to problems whose\ninput and the output sequences have different lengths with complicated and non-monotonic relation-\nships."}, "coordinates": [{"x": 0.1729, "y": 0.279}, {"x": 0.8276, "y": 0.279}, {"x": 0.8276, "y": 0.3363}, {"x": 0.1729, "y": 0.3363}], "id": 23, "page": 3}, {"category": "paragraph", "content": {"html": "<br><p id='24' data-category='paragraph' style='font-size:14px'>The simplest strategy for general sequence learning is to map the input sequence to a fixed-sized<br>vector using one RNN, and then to map the vector to the target sequence with another RNN (this<br>approach has also been taken by Cho et al. [5]). While it could work in principle since the RNN is<br>provided with all the relevant information, it would be difficult to train the RNNs due to the resulting<br>long term dependencies (figure 1) [14, 4, 16, 15]. However, the Long Short-Term Memory (LSTM)<br>[16] is known to learn problems with long range temporal dependencies, so an LSTM may succeed<br>in this setting.</p>", "markdown": "The simplest strategy for general sequence learning is to map the input sequence to a fixed-sized\nvector using one RNN, and then to map the vector to the target sequence with another RNN (this\napproach has also been taken by Cho et al. [5]). While it could work in principle since the RNN is\nprovided with all the relevant information, it would be difficult to train the RNNs due to the resulting\nlong term dependencies (figure 1) [14, 4, 16, 15]. However, the Long Short-Term Memory (LSTM)\n[16] is known to learn problems with long range temporal dependencies, so an LSTM may succeed\nin this setting.", "text": "The simplest strategy for general sequence learning is to map the input sequence to a fixed-sized\nvector using one RNN, and then to map the vector to the target sequence with another RNN (this\napproach has also been taken by Cho et al. [5]). While it could work in principle since the RNN is\nprovided with all the relevant information, it would be difficult to train the RNNs due to the resulting\nlong term dependencies (figure 1) [14, 4, 16, 15]. However, the Long Short-Term Memory (LSTM)\n[16] is known to learn problems with long range temporal dependencies, so an LSTM may succeed\nin this setting."}, "coordinates": [{"x": 0.1737, "y": 0.3423}, {"x": 0.828, "y": 0.3423}, {"x": 0.828, "y": 0.4397}, {"x": 0.1737, "y": 0.4397}], "id": 24, "page": 3}, {"category": "paragraph", "content": {"html": "<p id='25' data-category='paragraph' style='font-size:14px'>The goal of the LSTM is to estimate the conditional probability p(y1, . : , YT' x1,···, xT) where<br>(x1, · · · , xT) is an input sequence and Y1, · · · , YT' is its corresponding output sequence whose length<br>T' may differ from T. The LSTM computes this conditional probability by first obtaining the fixed-<br>dimensional representation v of the input sequence (x1,.. · , xT) given by the last hidden state of the<br>LSTM, and then computing the probability of y1, · · · , YT' with a standard LSTM-LM formulation<br>whose initial hidden state is set to the representation v of x1, · · · , XT:</p>", "markdown": "The goal of the LSTM is to estimate the conditional probability p(y1, . : , YT' x1,···, xT) where\n(x1, · · · , xT) is an input sequence and Y1, · · · , YT' is its corresponding output sequence whose length\nT' may differ from T. The LSTM computes this conditional probability by first obtaining the fixed-\ndimensional representation v of the input sequence (x1,.. · , xT) given by the last hidden state of the\nLSTM, and then computing the probability of y1, · · · , YT' with a standard LSTM-LM formulation\nwhose initial hidden state is set to the representation v of x1, · · · , XT:", "text": "The goal of the LSTM is to estimate the conditional probability p(y1, . : , YT' x1,···, xT) where\n(x1, · · · , xT) is an input sequence and Y1, · · · , YT' is its corresponding output sequence whose length\nT' may differ from T. The LSTM computes this conditional probability by first obtaining the fixed-\ndimensional representation v of the input sequence (x1,.. · , xT) given by the last hidden state of the\nLSTM, and then computing the probability of y1, · · · , YT' with a standard LSTM-LM formulation\nwhose initial hidden state is set to the representation v of x1, · · · , XT:"}, "coordinates": [{"x": 0.173, "y": 0.4463}, {"x": 0.8277, "y": 0.4463}, {"x": 0.8277, "y": 0.5325}, {"x": 0.173, "y": 0.5325}], "id": 25, "page": 3}, {"category": "equation", "content": {"html": "<p id='26' data-category='equation'>$$p(y_{1},\\cdot\\cdot\\cdot,y_{T^{\\prime}}|x_{1},\\cdot\\cdot\\cdot,x_{T})=\\prod_{t=1}^{T^{\\prime}}p(y_{t}|v,y_{1},\\cdot\\cdot\\cdot,y_{t-1})$$</p>", "markdown": "$$p(y_{1},\\cdot\\cdot\\cdot,y_{T^{\\prime}}|x_{1},\\cdot\\cdot\\cdot,x_{T})=\\prod_{t=1}^{T^{\\prime}}p(y_{t}|v,y_{1},\\cdot\\cdot\\cdot,y_{t-1})$$", "text": "T' \np(y1, . ··· YT' |X1,...,XT) = II p(yt|v, y1, · ··· yt-1) \nt=1"}, "coordinates": [{"x": 0.3168, "y": 0.5405}, {"x": 0.6843, "y": 0.5405}, {"x": 0.6843, "y": 0.5808}, {"x": 0.3168, "y": 0.5808}], "id": 26, "page": 3}, {"category": "caption", "content": {"html": "<br><caption id='27' style='font-size:20px'>(1)</caption>", "markdown": "(1)", "text": "(1)"}, "coordinates": [{"x": 0.803, "y": 0.5523}, {"x": 0.8261, "y": 0.5523}, {"x": 0.8261, "y": 0.5682}, {"x": 0.803, "y": 0.5682}], "id": 27, "page": 3}, {"category": "paragraph", "content": {"html": "<p id='28' data-category='paragraph' style='font-size:14px'>In this equation, each p(yt|v, y1, · · · , yt-1) distribution is represented with a softmax over all the<br>words in the vocabulary. We use the LSTM formulation from Graves [10]. Note that we require that<br>each sentence ends with a special end-of-sentence symbol \"<EOS>\", which enables the model to<br>define a distribution over sequences of all possible lengths. The overall scheme is outlined in figure<br>· <EOS>\" and then uses<br>1, where the shown LSTM computes the representation of \"A\", \"B\" , \"C\" ,<br>this representation to compute the probability of \"W\", \"X\", \"Y\" \"Z\" , <EOS>\"<br>\"<br>,</p>", "markdown": "In this equation, each p(yt|v, y1, · · · , yt-1) distribution is represented with a softmax over all the\nwords in the vocabulary. We use the LSTM formulation from Graves [10]. Note that we require that\neach sentence ends with a special end-of-sentence symbol \"<EOS>\", which enables the model to\ndefine a distribution over sequences of all possible lengths. The overall scheme is outlined in figure\n· <EOS>\" and then uses\n1, where the shown LSTM computes the representation of \"A\", \"B\" , \"C\" ,\nthis representation to compute the probability of \"W\", \"X\", \"Y\" \"Z\" , <EOS>\"\n\"\n,", "text": "In this equation, each p(yt|v, y1, · · · , yt-1) distribution is represented with a softmax over all the\nwords in the vocabulary. We use the LSTM formulation from Graves [10]. Note that we require that\neach sentence ends with a special end-of-sentence symbol \"<EOS>\", which enables the model to\ndefine a distribution over sequences of all possible lengths. The overall scheme is outlined in figure\n· <EOS>\" and then uses\n1, where the shown LSTM computes the representation of \"A\", \"B\" , \"C\" ,\nthis representation to compute the probability of \"W\", \"X\", \"Y\" \"Z\" , <EOS>\"\n\"\n,"}, "coordinates": [{"x": 0.1727, "y": 0.5881}, {"x": 0.8281, "y": 0.5881}, {"x": 0.8281, "y": 0.6724}, {"x": 0.1727, "y": 0.6724}], "id": 28, "page": 3}, {"category": "paragraph", "content": {"html": "<br><p id='29' data-category='paragraph' style='font-size:14px'>Our actual models differ from the above description in three important ways. First, we used two<br>different LSTMs: one for the input sequence and another for the output sequence, because doing<br>so increases the number model parameters at negligible computational cost and makes it natural to<br>train the LSTM on multiple language pairs simultaneously [18]. Second, we found that deep LSTMs<br>significantly outperformed shallow LSTMs, so we chose an LSTM with four layers. Third, we found<br>it extremely valuable to reverse the order of the words of the input sentence. So for example, instead<br>of mapping the sentence a, b, c to the sentence �, �, % the LSTM is asked to map c, b, a to �, �, %<br>where �, �, づ is the translation of a, b, c. This way, a is in close proximity to �, bis fairly close to �,<br>and so on, a fact that makes it easy for SGD to \"establish communication\" between the input and the<br>output. We found this simple data transformation to greatly improve the performance of the LSTM.</p>", "markdown": "Our actual models differ from the above description in three important ways. First, we used two\ndifferent LSTMs: one for the input sequence and another for the output sequence, because doing\nso increases the number model parameters at negligible computational cost and makes it natural to\ntrain the LSTM on multiple language pairs simultaneously [18]. Second, we found that deep LSTMs\nsignificantly outperformed shallow LSTMs, so we chose an LSTM with four layers. Third, we found\nit extremely valuable to reverse the order of the words of the input sentence. So for example, instead\nof mapping the sentence a, b, c to the sentence �, �, % the LSTM is asked to map c, b, a to �, �, %\nwhere �, �, づ is the translation of a, b, c. This way, a is in close proximity to �, bis fairly close to �,\nand so on, a fact that makes it easy for SGD to \"establish communication\" between the input and the\noutput. We found this simple data transformation to greatly improve the performance of the LSTM.", "text": "Our actual models differ from the above description in three important ways. First, we used two\ndifferent LSTMs: one for the input sequence and another for the output sequence, because doing\nso increases the number model parameters at negligible computational cost and makes it natural to\ntrain the LSTM on multiple language pairs simultaneously [18]. Second, we found that deep LSTMs\nsignificantly outperformed shallow LSTMs, so we chose an LSTM with four layers. Third, we found\nit extremely valuable to reverse the order of the words of the input sentence. So for example, instead\nof mapping the sentence a, b, c to the sentence �, �, % the LSTM is asked to map c, b, a to �, �, %\nwhere �, �, づ is the translation of a, b, c. This way, a is in close proximity to �, bis fairly close to �,\nand so on, a fact that makes it easy for SGD to \"establish communication\" between the input and the\noutput. We found this simple data transformation to greatly improve the performance of the LSTM."}, "coordinates": [{"x": 0.1734, "y": 0.6777}, {"x": 0.8279, "y": 0.6777}, {"x": 0.8279, "y": 0.819}, {"x": 0.1734, "y": 0.819}], "id": 29, "page": 3}, {"category": "paragraph", "content": {"html": "<p id='30' data-category='paragraph' style='font-size:22px'>3 Experiments</p>", "markdown": "3 Experiments", "text": "3 Experiments"}, "coordinates": [{"x": 0.1727, "y": 0.8368}, {"x": 0.3153, "y": 0.8368}, {"x": 0.3153, "y": 0.8545}, {"x": 0.1727, "y": 0.8545}], "id": 30, "page": 3}, {"category": "paragraph", "content": {"html": "<p id='31' data-category='paragraph' style='font-size:14px'>We applied our method to the WMT' 14 English to French MT task in two ways. We used it to<br>directly translate the input sentence without using a reference SMT system and we it to rescore the<br>n-best lists of an SMT baseline. We report the accuracy of these translation methods, present sample<br>translations, and visualize the resulting sentence representation.</p>", "markdown": "We applied our method to the WMT' 14 English to French MT task in two ways. We used it to\ndirectly translate the input sentence without using a reference SMT system and we it to rescore the\nn-best lists of an SMT baseline. We report the accuracy of these translation methods, present sample\ntranslations, and visualize the resulting sentence representation.", "text": "We applied our method to the WMT' 14 English to French MT task in two ways. We used it to\ndirectly translate the input sentence without using a reference SMT system and we it to rescore the\nn-best lists of an SMT baseline. We report the accuracy of these translation methods, present sample\ntranslations, and visualize the resulting sentence representation."}, "coordinates": [{"x": 0.173, "y": 0.8682}, {"x": 0.8279, "y": 0.8682}, {"x": 0.8279, "y": 0.9255}, {"x": 0.173, "y": 0.9255}], "id": 31, "page": 3}, {"category": "footer", "content": {"html": "<footer id='32' style='font-size:14px'>3</footer>", "markdown": "3", "text": "3"}, "coordinates": [{"x": 0.4936, "y": 0.9484}, {"x": 0.507, "y": 0.9484}, {"x": 0.507, "y": 0.9623}, {"x": 0.4936, "y": 0.9623}], "id": 32, "page": 3}, {"category": "paragraph", "content": {"html": "<p id='33' data-category='paragraph' style='font-size:14px'>3.1 Dataset details</p>", "markdown": "3.1 Dataset details", "text": "3.1 Dataset details"}, "coordinates": [{"x": 0.1728, "y": 0.1042}, {"x": 0.3182, "y": 0.1042}, {"x": 0.3182, "y": 0.1192}, {"x": 0.1728, "y": 0.1192}], "id": 33, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='34' data-category='paragraph' style='font-size:14px'>We used the WMT' 14 English to French dataset. We trained our models on a subset of 12M sen-<br>tences consisting of 348M French words and 304M English words, which is a clean \"selected\"<br>subset from [29]. We chose this translation task and this specific training set subset because of the<br>public availability of a tokenized training and test set together with 1000-best lists from the baseline<br>SMT [29].</p>", "markdown": "We used the WMT' 14 English to French dataset. We trained our models on a subset of 12M sen-\ntences consisting of 348M French words and 304M English words, which is a clean \"selected\"\nsubset from [29]. We chose this translation task and this specific training set subset because of the\npublic availability of a tokenized training and test set together with 1000-best lists from the baseline\nSMT [29].", "text": "We used the WMT' 14 English to French dataset. We trained our models on a subset of 12M sen-\ntences consisting of 348M French words and 304M English words, which is a clean \"selected\"\nsubset from [29]. We chose this translation task and this specific training set subset because of the\npublic availability of a tokenized training and test set together with 1000-best lists from the baseline\nSMT [29]."}, "coordinates": [{"x": 0.1733, "y": 0.1313}, {"x": 0.828, "y": 0.1313}, {"x": 0.828, "y": 0.2009}, {"x": 0.1733, "y": 0.2009}], "id": 34, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='35' data-category='paragraph' style='font-size:14px'>As typical neural language models rely on a vector representation for each word, we used a fixed<br>vocabulary for both languages. We used 160,000 of the most frequent words for the source language<br>and 80,000 of the most frequent words for the target language. Every out-of-vocabulary word was<br>replaced with a special \"UNK\" token.</p>", "markdown": "As typical neural language models rely on a vector representation for each word, we used a fixed\nvocabulary for both languages. We used 160,000 of the most frequent words for the source language\nand 80,000 of the most frequent words for the target language. Every out-of-vocabulary word was\nreplaced with a special \"UNK\" token.", "text": "As typical neural language models rely on a vector representation for each word, we used a fixed\nvocabulary for both languages. We used 160,000 of the most frequent words for the source language\nand 80,000 of the most frequent words for the target language. Every out-of-vocabulary word was\nreplaced with a special \"UNK\" token."}, "coordinates": [{"x": 0.1734, "y": 0.2079}, {"x": 0.8276, "y": 0.2079}, {"x": 0.8276, "y": 0.265}, {"x": 0.1734, "y": 0.265}], "id": 35, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='36' data-category='paragraph' style='font-size:18px'>3.2 Decoding and Rescoring</p>", "markdown": "3.2 Decoding and Rescoring", "text": "3.2 Decoding and Rescoring"}, "coordinates": [{"x": 0.1716, "y": 0.2812}, {"x": 0.3863, "y": 0.2812}, {"x": 0.3863, "y": 0.2973}, {"x": 0.1716, "y": 0.2973}], "id": 36, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='37' data-category='paragraph' style='font-size:14px'>The core of our experiments involved training a large deep LSTM on many sentence pairs. We<br>trained it by maximizing the log probability of a correct translation T given the source sentence S,<br>so the training objective is</p>", "markdown": "The core of our experiments involved training a large deep LSTM on many sentence pairs. We\ntrained it by maximizing the log probability of a correct translation T given the source sentence S,\nso the training objective is", "text": "The core of our experiments involved training a large deep LSTM on many sentence pairs. We\ntrained it by maximizing the log probability of a correct translation T given the source sentence S,\nso the training objective is"}, "coordinates": [{"x": 0.1724, "y": 0.3072}, {"x": 0.8274, "y": 0.3072}, {"x": 0.8274, "y": 0.3496}, {"x": 0.1724, "y": 0.3496}], "id": 37, "page": 4}, {"category": "equation", "content": {"html": "<br><p id='38' data-category='equation'>$$\\textstyle{1/|{\\cal G}|}_{(T,S)\\in{\\cal S}}\\log p(T|S)$$</p>", "markdown": "$$\\textstyle{1/|{\\cal G}|}_{(T,S)\\in{\\cal S}}\\log p(T|S)$$", "text": "1/S � log p(T|S) \n(T,S)ES"}, "coordinates": [{"x": 0.4154, "y": 0.3504}, {"x": 0.5852, "y": 0.3504}, {"x": 0.5852, "y": 0.3828}, {"x": 0.4154, "y": 0.3828}], "id": 38, "page": 4}, {"category": "paragraph", "content": {"html": "<br><p id='39' data-category='paragraph' style='font-size:16px'>where s is the training set. Once training is complete, we produce translations by finding the most<br>likely translation according to the LSTM:</p>", "markdown": "where s is the training set. Once training is complete, we produce translations by finding the most\nlikely translation according to the LSTM:", "text": "where s is the training set. Once training is complete, we produce translations by finding the most\nlikely translation according to the LSTM:"}, "coordinates": [{"x": 0.1728, "y": 0.388}, {"x": 0.829, "y": 0.388}, {"x": 0.829, "y": 0.4174}, {"x": 0.1728, "y": 0.4174}], "id": 39, "page": 4}, {"category": "equation", "content": {"html": "<p id='40' data-category='equation'>$${\\hat{T}}=\\arg\\operatorname*{max}_{T}p(T|S)$$</p>", "markdown": "$${\\hat{T}}=\\arg\\operatorname*{max}_{T}p(T|S)$$", "text": "T = arg max p(T|S) \nT"}, "coordinates": [{"x": 0.4267, "y": 0.4246}, {"x": 0.5727, "y": 0.4246}, {"x": 0.5727, "y": 0.4463}, {"x": 0.4267, "y": 0.4463}], "id": 40, "page": 4}, {"category": "caption", "content": {"html": "<br><caption id='41' style='font-size:20px'>(2)</caption>", "markdown": "(2)", "text": "(2)"}, "coordinates": [{"x": 0.803, "y": 0.4268}, {"x": 0.8259, "y": 0.4268}, {"x": 0.8259, "y": 0.4423}, {"x": 0.803, "y": 0.4423}], "id": 41, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='42' data-category='paragraph' style='font-size:14px'>We search for the most likely translation using a simple left-to-right beam search decoder which<br>maintains a small number B of partial hypotheses, where a partial hypothesis is a prefix of some<br>translation. At each timestep we extend each partial hypothesis in the beam with every possible<br>word in the vocabulary. This greatly increases the number of the hypotheses so we discard all but<br>the B most likely hypotheses according to the model's log probability. As soon as the \"<EOS>\"<br>symbol is appended to a hypothesis, it is removed from the beam and is added to the set of complete<br>hypotheses. While this decoder is approximate, it is simple to implement. Interestingly, our system<br>performs well even with a beam size of 1, and a beam of size 2 provides most of the benefits of beam<br>search (Table 1).</p>", "markdown": "We search for the most likely translation using a simple left-to-right beam search decoder which\nmaintains a small number B of partial hypotheses, where a partial hypothesis is a prefix of some\ntranslation. At each timestep we extend each partial hypothesis in the beam with every possible\nword in the vocabulary. This greatly increases the number of the hypotheses so we discard all but\nthe B most likely hypotheses according to the model's log probability. As soon as the \"<EOS>\"\nsymbol is appended to a hypothesis, it is removed from the beam and is added to the set of complete\nhypotheses. While this decoder is approximate, it is simple to implement. Interestingly, our system\nperforms well even with a beam size of 1, and a beam of size 2 provides most of the benefits of beam\nsearch (Table 1).", "text": "We search for the most likely translation using a simple left-to-right beam search decoder which\nmaintains a small number B of partial hypotheses, where a partial hypothesis is a prefix of some\ntranslation. At each timestep we extend each partial hypothesis in the beam with every possible\nword in the vocabulary. This greatly increases the number of the hypotheses so we discard all but\nthe B most likely hypotheses according to the model's log probability. As soon as the \"<EOS>\"\nsymbol is appended to a hypothesis, it is removed from the beam and is added to the set of complete\nhypotheses. While this decoder is approximate, it is simple to implement. Interestingly, our system\nperforms well even with a beam size of 1, and a beam of size 2 provides most of the benefits of beam\nsearch (Table 1)."}, "coordinates": [{"x": 0.1725, "y": 0.4552}, {"x": 0.8277, "y": 0.4552}, {"x": 0.8277, "y": 0.5808}, {"x": 0.1725, "y": 0.5808}], "id": 42, "page": 4}, {"category": "paragraph", "content": {"html": "<br><p id='43' data-category='paragraph' style='font-size:14px'>We also used the LSTM to rescore the 1000-best lists produced by the baseline system [29]. To<br>rescore an n-best list, we computed the log probability of every hypothesis with our LSTM and took<br>an even average with their score and the LSTM's score.</p>", "markdown": "We also used the LSTM to rescore the 1000-best lists produced by the baseline system [29]. To\nrescore an n-best list, we computed the log probability of every hypothesis with our LSTM and took\nan even average with their score and the LSTM's score.", "text": "We also used the LSTM to rescore the 1000-best lists produced by the baseline system [29]. To\nrescore an n-best list, we computed the log probability of every hypothesis with our LSTM and took\nan even average with their score and the LSTM's score."}, "coordinates": [{"x": 0.1738, "y": 0.5873}, {"x": 0.8274, "y": 0.5873}, {"x": 0.8274, "y": 0.6313}, {"x": 0.1738, "y": 0.6313}], "id": 43, "page": 4}, {"category": "heading1", "content": {"html": "<h1 id='44' style='font-size:16px'>3.3 Reversing the Source Sentences</h1>", "markdown": "# 3.3 Reversing the Source Sentences", "text": "3.3 Reversing the Source Sentences"}, "coordinates": [{"x": 0.1722, "y": 0.6472}, {"x": 0.4348, "y": 0.6472}, {"x": 0.4348, "y": 0.6631}, {"x": 0.1722, "y": 0.6631}], "id": 44, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='45' data-category='paragraph' style='font-size:14px'>While the LSTM is capable of solving problems with long term dependencies, we discovered that<br>the LSTM learns much better when the source sentences are reversed (the target sentences are not<br>reversed). By doing so, the LSTM's test perplexity dropped from 5.8 to 4.7, and the test BLEU<br>scores of its decoded translations increased from 25.9 to 30.6.</p>", "markdown": "While the LSTM is capable of solving problems with long term dependencies, we discovered that\nthe LSTM learns much better when the source sentences are reversed (the target sentences are not\nreversed). By doing so, the LSTM's test perplexity dropped from 5.8 to 4.7, and the test BLEU\nscores of its decoded translations increased from 25.9 to 30.6.", "text": "While the LSTM is capable of solving problems with long term dependencies, we discovered that\nthe LSTM learns much better when the source sentences are reversed (the target sentences are not\nreversed). By doing so, the LSTM's test perplexity dropped from 5.8 to 4.7, and the test BLEU\nscores of its decoded translations increased from 25.9 to 30.6."}, "coordinates": [{"x": 0.1734, "y": 0.6734}, {"x": 0.827, "y": 0.6734}, {"x": 0.827, "y": 0.7299}, {"x": 0.1734, "y": 0.7299}], "id": 45, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='46' data-category='paragraph' style='font-size:14px'>While we do not have a complete explanation to this phenomenon, we believe that it is caused by<br>the introduction of many short term dependencies to the dataset. Normally, when we concatenate a<br>source sentence with a target sentence, each word in the source sentence is far from its corresponding<br>word in the target sentence. As a result, the problem has a large \"minimal time lag\" [17]. By<br>reversing the words in the source sentence, the average distance between corresponding words in<br>the source and target language is unchanged. However, the first few words in the source language<br>are now very close to the first few words in the target language, so the problem's minimal time lag is<br>greatly reduced. Thus, backpropagation has an easier time \"establishing communication\" between<br>the source sentence and the target sentence, which in turn results in substantially improved overall<br>performance.</p>", "markdown": "While we do not have a complete explanation to this phenomenon, we believe that it is caused by\nthe introduction of many short term dependencies to the dataset. Normally, when we concatenate a\nsource sentence with a target sentence, each word in the source sentence is far from its corresponding\nword in the target sentence. As a result, the problem has a large \"minimal time lag\" [17]. By\nreversing the words in the source sentence, the average distance between corresponding words in\nthe source and target language is unchanged. However, the first few words in the source language\nare now very close to the first few words in the target language, so the problem's minimal time lag is\ngreatly reduced. Thus, backpropagation has an easier time \"establishing communication\" between\nthe source sentence and the target sentence, which in turn results in substantially improved overall\nperformance.", "text": "While we do not have a complete explanation to this phenomenon, we believe that it is caused by\nthe introduction of many short term dependencies to the dataset. Normally, when we concatenate a\nsource sentence with a target sentence, each word in the source sentence is far from its corresponding\nword in the target sentence. As a result, the problem has a large \"minimal time lag\" [17]. By\nreversing the words in the source sentence, the average distance between corresponding words in\nthe source and target language is unchanged. However, the first few words in the source language\nare now very close to the first few words in the target language, so the problem's minimal time lag is\ngreatly reduced. Thus, backpropagation has an easier time \"establishing communication\" between\nthe source sentence and the target sentence, which in turn results in substantially improved overall\nperformance."}, "coordinates": [{"x": 0.1739, "y": 0.7373}, {"x": 0.8274, "y": 0.7373}, {"x": 0.8274, "y": 0.8744}, {"x": 0.1739, "y": 0.8744}], "id": 46, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='47' data-category='paragraph' style='font-size:14px'>Initially, we believed that reversing the input sentences would only lead to more confident predic-<br>tions in the early parts of the target sentence and to less confident predictions in the later parts. How-<br>ever, LSTMs trained on reversed source sentences did much better on long sentences than LSTMs</p>", "markdown": "Initially, we believed that reversing the input sentences would only lead to more confident predic-\ntions in the early parts of the target sentence and to less confident predictions in the later parts. How-\never, LSTMs trained on reversed source sentences did much better on long sentences than LSTMs", "text": "Initially, we believed that reversing the input sentences would only lead to more confident predic-\ntions in the early parts of the target sentence and to less confident predictions in the later parts. How-\never, LSTMs trained on reversed source sentences did much better on long sentences than LSTMs"}, "coordinates": [{"x": 0.1735, "y": 0.8833}, {"x": 0.8281, "y": 0.8833}, {"x": 0.8281, "y": 0.9264}, {"x": 0.1735, "y": 0.9264}], "id": 47, "page": 4}, {"category": "footer", "content": {"html": "<footer id='48' style='font-size:14px'>4</footer>", "markdown": "4", "text": "4"}, "coordinates": [{"x": 0.493, "y": 0.9489}, {"x": 0.5079, "y": 0.9489}, {"x": 0.5079, "y": 0.9614}, {"x": 0.493, "y": 0.9614}], "id": 48, "page": 4}, {"category": "paragraph", "content": {"html": "<p id='49' data-category='paragraph' style='font-size:16px'>trained on the raw source sentences (see sec. 3.7), which suggests that reversing the input sentences<br>results in LSTMs with better memory utilization.</p>", "markdown": "trained on the raw source sentences (see sec. 3.7), which suggests that reversing the input sentences\nresults in LSTMs with better memory utilization.", "text": "trained on the raw source sentences (see sec. 3.7), which suggests that reversing the input sentences\nresults in LSTMs with better memory utilization."}, "coordinates": [{"x": 0.172, "y": 0.1051}, {"x": 0.828, "y": 0.1051}, {"x": 0.828, "y": 0.1341}, {"x": 0.172, "y": 0.1341}], "id": 49, "page": 5}, {"category": "paragraph", "content": {"html": "<p id='50' data-category='paragraph' style='font-size:22px'>3.4 Training details</p>", "markdown": "3.4 Training details", "text": "3.4 Training details"}, "coordinates": [{"x": 0.1732, "y": 0.1498}, {"x": 0.3253, "y": 0.1498}, {"x": 0.3253, "y": 0.1652}, {"x": 0.1732, "y": 0.1652}], "id": 50, "page": 5}, {"category": "paragraph", "content": {"html": "<p id='51' data-category='paragraph' style='font-size:18px'>We found that the LSTM models are fairly easy to train. We used deep LSTMs with 4 layers,<br>with 1000 cells at each layer and 1000 dimensional word embeddings, with an input vocabulary<br>of 160,000 and an output vocabulary of 80,000. Thus the deep LSTM uses 8000 real numbers to<br>represent a sentence. We found deep LSTMs to significantly outperform shallow LSTMs, where<br>each additional layer reduced perplexity by nearly 10%, possibly due to their much larger hidden<br>state. We used a naive softmax over 80,000 words at each output. The resulting LSTM has 384M<br>parameters of which 64M are pure recurrent connections (32M for the \"encoder\" LSTM and 32M<br>for the \"decoder\" LSTM). The complete training details are given below:</p>", "markdown": "We found that the LSTM models are fairly easy to train. We used deep LSTMs with 4 layers,\nwith 1000 cells at each layer and 1000 dimensional word embeddings, with an input vocabulary\nof 160,000 and an output vocabulary of 80,000. Thus the deep LSTM uses 8000 real numbers to\nrepresent a sentence. We found deep LSTMs to significantly outperform shallow LSTMs, where\neach additional layer reduced perplexity by nearly 10%, possibly due to their much larger hidden\nstate. We used a naive softmax over 80,000 words at each output. The resulting LSTM has 384M\nparameters of which 64M are pure recurrent connections (32M for the \"encoder\" LSTM and 32M\nfor the \"decoder\" LSTM). The complete training details are given below:", "text": "We found that the LSTM models are fairly easy to train. We used deep LSTMs with 4 layers,\nwith 1000 cells at each layer and 1000 dimensional word embeddings, with an input vocabulary\nof 160,000 and an output vocabulary of 80,000. Thus the deep LSTM uses 8000 real numbers to\nrepresent a sentence. We found deep LSTMs to significantly outperform shallow LSTMs, where\neach additional layer reduced perplexity by nearly 10%, possibly due to their much larger hidden\nstate. We used a naive softmax over 80,000 words at each output. The resulting LSTM has 384M\nparameters of which 64M are pure recurrent connections (32M for the \"encoder\" LSTM and 32M\nfor the \"decoder\" LSTM). The complete training details are given below:"}, "coordinates": [{"x": 0.173, "y": 0.1757}, {"x": 0.8275, "y": 0.1757}, {"x": 0.8275, "y": 0.288}, {"x": 0.173, "y": 0.288}], "id": 51, "page": 5}, {"category": "list", "content": {"html": "<p id='52' data-category='list' style='font-size:18px'>· We initialized all of the LSTM's parameters with the uniform distribution between -0.08<br>and 0.08<br>· We used stochastic gradient descent without momentum, with a fixed learning rate of 0.7.<br>After 5 epochs, we begun halving the learning rate every half epoch. We trained our models<br>for a total of 7.5 epochs.<br>· We used batches of 128 sequences for the gradient and divided it the size of the batch<br>(namely, 128).<br>· Although LSTMs tend to not suffer from the vanishing gradient problem, they can have<br>exploding gradients. Thus we enforced a hard constraint on the norm of the gradient [10,<br>25] by scaling it when its norm exceeded a threshold. For each training batch, we compute<br>s = 1191|2, where g is the gradient divided by 128. If s > 5, we set g = 5g.<br>s<br>· Different sentences have different lengths. Most sentences are short (e.g., length 20-30)<br>but some sentences are long (e.g., length > 100), so a minibatch of 128 randomly chosen<br>training sentences will have many short sentences and few long sentences, and as a result,<br>much of the computation in the minibatch is wasted. To address this problem, we made sure<br>that all sentences in a minibatch are roughly of the same length, yielding a 2x speedup.</p>", "markdown": "- · We initialized all of the LSTM's parameters with the uniform distribution between -0.08\n- and 0.08\n- · We used stochastic gradient descent without momentum, with a fixed learning rate of 0.7.\n- After 5 epochs, we begun halving the learning rate every half epoch. We trained our models\n- for a total of 7.5 epochs.\n- · We used batches of 128 sequences for the gradient and divided it the size of the batch\n- (namely, 128).\n- · Although LSTMs tend to not suffer from the vanishing gradient problem, they can have\n- exploding gradients. Thus we enforced a hard constraint on the norm of the gradient [10,\n- 25] by scaling it when its norm exceeded a threshold. For each training batch, we compute\n- s = 1191|2, where g is the gradient divided by 128. If s > 5, we set g = 5g.\n- s\n- · Different sentences have different lengths. Most sentences are short (e.g., length 20-30)\n- but some sentences are long (e.g., length > 100), so a minibatch of 128 randomly chosen\n- training sentences will have many short sentences and few long sentences, and as a result,\n- much of the computation in the minibatch is wasted. To address this problem, we made sure\n- that all sentences in a minibatch are roughly of the same length, yielding a 2x speedup.\n", "text": "· We initialized all of the LSTM's parameters with the uniform distribution between -0.08\nand 0.08\n· We used stochastic gradient descent without momentum, with a fixed learning rate of 0.7.\nAfter 5 epochs, we begun halving the learning rate every half epoch. We trained our models\nfor a total of 7.5 epochs.\n· We used batches of 128 sequences for the gradient and divided it the size of the batch\n(namely, 128).\n· Although LSTMs tend to not suffer from the vanishing gradient problem, they can have\nexploding gradients. Thus we enforced a hard constraint on the norm of the gradient [10,\n25] by scaling it when its norm exceeded a threshold. For each training batch, we compute\ns = 1191|2, where g is the gradient divided by 128. If s > 5, we set g = 5g.\ns\n· Different sentences have different lengths. Most sentences are short (e.g., length 20-30)\nbut some sentences are long (e.g., length > 100), so a minibatch of 128 randomly chosen\ntraining sentences will have many short sentences and few long sentences, and as a result,\nmuch of the computation in the minibatch is wasted. To address this problem, we made sure\nthat all sentences in a minibatch are roughly of the same length, yielding a 2x speedup."}, "coordinates": [{"x": 0.2139, "y": 0.2991}, {"x": 0.8294, "y": 0.2991}, {"x": 0.8294, "y": 0.5425}, {"x": 0.2139, "y": 0.5425}], "id": 52, "page": 5}, {"category": "heading1", "content": {"html": "<h1 id='53' style='font-size:20px'>3.5 Parallelization</h1>", "markdown": "# 3.5 Parallelization", "text": "3.5 Parallelization"}, "coordinates": [{"x": 0.1732, "y": 0.5599}, {"x": 0.3169, "y": 0.5599}, {"x": 0.3169, "y": 0.575}, {"x": 0.1732, "y": 0.575}], "id": 53, "page": 5}, {"category": "paragraph", "content": {"html": "<p id='54' data-category='paragraph' style='font-size:16px'>A C++ implementation of deep LSTM with the configuration from the previous section on a sin-<br>gle GPU processes a speed of approximately 1,700 words per second. This was too slow for our<br>purposes, so we parallelized our model using an 8-GPU machine. Each layer of the LSTM was<br>executed on a different GPU and communicated its activations to the next GPU / layer as soon as<br>they were computed. Our models have 4 layers of LSTMs, each of which resides on a separate<br>GPU. The remaining 4 GPUs were used to parallelize the softmax, so each GPU was responsible<br>for multiplying by a 1000 x 20000 matrix. The resulting implementation achieved a speed of 6,300<br>(both English and French) words per second with a minibatch size of 128. Training took about a ten<br>days with this implementation.</p>", "markdown": "A C++ implementation of deep LSTM with the configuration from the previous section on a sin-\ngle GPU processes a speed of approximately 1,700 words per second. This was too slow for our\npurposes, so we parallelized our model using an 8-GPU machine. Each layer of the LSTM was\nexecuted on a different GPU and communicated its activations to the next GPU / layer as soon as\nthey were computed. Our models have 4 layers of LSTMs, each of which resides on a separate\nGPU. The remaining 4 GPUs were used to parallelize the softmax, so each GPU was responsible\nfor multiplying by a 1000 x 20000 matrix. The resulting implementation achieved a speed of 6,300\n(both English and French) words per second with a minibatch size of 128. Training took about a ten\ndays with this implementation.", "text": "A C++ implementation of deep LSTM with the configuration from the previous section on a sin-\ngle GPU processes a speed of approximately 1,700 words per second. This was too slow for our\npurposes, so we parallelized our model using an 8-GPU machine. Each layer of the LSTM was\nexecuted on a different GPU and communicated its activations to the next GPU / layer as soon as\nthey were computed. Our models have 4 layers of LSTMs, each of which resides on a separate\nGPU. The remaining 4 GPUs were used to parallelize the softmax, so each GPU was responsible\nfor multiplying by a 1000 x 20000 matrix. The resulting implementation achieved a speed of 6,300\n(both English and French) words per second with a minibatch size of 128. Training took about a ten\ndays with this implementation."}, "coordinates": [{"x": 0.1731, "y": 0.5857}, {"x": 0.8274, "y": 0.5857}, {"x": 0.8274, "y": 0.7124}, {"x": 0.1731, "y": 0.7124}], "id": 54, "page": 5}, {"category": "paragraph", "content": {"html": "<p id='55' data-category='paragraph' style='font-size:22px'>3.6 Experimental Results</p>", "markdown": "3.6 Experimental Results", "text": "3.6 Experimental Results"}, "coordinates": [{"x": 0.1725, "y": 0.7279}, {"x": 0.3659, "y": 0.7279}, {"x": 0.3659, "y": 0.7432}, {"x": 0.1725, "y": 0.7432}], "id": 55, "page": 5}, {"category": "paragraph", "content": {"html": "<p id='56' data-category='paragraph' style='font-size:16px'>We used the cased BLEU score [24] to evaluate the quality of our translations. We computed our<br>BLEU scores using multi-bleu · pl 1 the tokenized predictions and ground truth. This way<br>on<br>of evaluating the BELU score is consistent with [5] and [2], and reproduces the 33.3 score of [29].<br>However, if we evaluate the best WMT' 14 system [9] (whose predictions can be downloaded from<br>statmt · org \\matrix) in this manner, we get 37.0, which is greater than the 35.8 reported by<br>statmt · org \\matrix.</p>", "markdown": "We used the cased BLEU score [24] to evaluate the quality of our translations. We computed our\nBLEU scores using multi-bleu · pl 1 the tokenized predictions and ground truth. This way\non\nof evaluating the BELU score is consistent with [5] and [2], and reproduces the 33.3 score of [29].\nHowever, if we evaluate the best WMT' 14 system [9] (whose predictions can be downloaded from\nstatmt · org \\matrix) in this manner, we get 37.0, which is greater than the 35.8 reported by\nstatmt · org \\matrix.", "text": "We used the cased BLEU score [24] to evaluate the quality of our translations. We computed our\nBLEU scores using multi-bleu · pl 1 the tokenized predictions and ground truth. This way\non\nof evaluating the BELU score is consistent with [5] and [2], and reproduces the 33.3 score of [29].\nHowever, if we evaluate the best WMT' 14 system [9] (whose predictions can be downloaded from\nstatmt · org \\matrix) in this manner, we get 37.0, which is greater than the 35.8 reported by\nstatmt · org \\matrix."}, "coordinates": [{"x": 0.1732, "y": 0.7542}, {"x": 0.8279, "y": 0.7542}, {"x": 0.8279, "y": 0.8383}, {"x": 0.1732, "y": 0.8383}], "id": 56, "page": 5}, {"category": "paragraph", "content": {"html": "<br><p id='57' data-category='paragraph' style='font-size:16px'>The results are presented in tables 1 and 2. Our best results are obtained with an ensemble of LSTMs<br>that differ in their random initializations and in the random order of minibatches. While the decoded<br>translations of the LSTM ensemble do not outperform the best WMT' 14 system, it is the first time<br>that a pure neural translation system outperforms a phrase-based SMT baseline on a large scale MT</p>", "markdown": "The results are presented in tables 1 and 2. Our best results are obtained with an ensemble of LSTMs\nthat differ in their random initializations and in the random order of minibatches. While the decoded\ntranslations of the LSTM ensemble do not outperform the best WMT' 14 system, it is the first time\nthat a pure neural translation system outperforms a phrase-based SMT baseline on a large scale MT", "text": "The results are presented in tables 1 and 2. Our best results are obtained with an ensemble of LSTMs\nthat differ in their random initializations and in the random order of minibatches. While the decoded\ntranslations of the LSTM ensemble do not outperform the best WMT' 14 system, it is the first time\nthat a pure neural translation system outperforms a phrase-based SMT baseline on a large scale MT"}, "coordinates": [{"x": 0.1736, "y": 0.8449}, {"x": 0.8279, "y": 0.8449}, {"x": 0.8279, "y": 0.9024}, {"x": 0.1736, "y": 0.9024}], "id": 57, "page": 5}, {"category": "footnote", "content": {"html": "<p id='58' data-category='footnote' style='font-size:14px'>1There several variants of the BLEU score, and each variant is defined with a perl script.</p>", "markdown": "1There several variants of the BLEU score, and each variant is defined with a perl script.", "text": "1There several variants of the BLEU score, and each variant is defined with a perl script."}, "coordinates": [{"x": 0.1976, "y": 0.9107}, {"x": 0.7159, "y": 0.9107}, {"x": 0.7159, "y": 0.9259}, {"x": 0.1976, "y": 0.9259}], "id": 58, "page": 5}, {"category": "footer", "content": {"html": "<footer id='59' style='font-size:18px'>5</footer>", "markdown": "5", "text": "5"}, "coordinates": [{"x": 0.4929, "y": 0.9481}, {"x": 0.5075, "y": 0.9481}, {"x": 0.5075, "y": 0.9625}, {"x": 0.4929, "y": 0.9625}], "id": 59, "page": 5}], "model": "document-parse-250618", "ocr": true, "usage": {"pages": 5}}